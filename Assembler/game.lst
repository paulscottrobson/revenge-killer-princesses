 AS V1.42 Beta [Bld 102] - source file game.asm - page 1 - 6/30/2016 22:27:01


       1/       0 :                     
       2/       0 :                     	include 1802.inc
(1)    1/       0 :                     ; ************************************************************************************************************
(1)    2/       0 :                     ; ************************************************************************************************************
(1)    3/       0 :                     ;
(1)    4/       0 :                     ;												1802 Generic Routines
(1)    5/       0 :                     ;
(1)    6/       0 :                     ; ************************************************************************************************************
(1)    7/       0 :                     ; ************************************************************************************************************
(1)    8/       0 :                     
(1)    9/       0 :                     	cpu 	1802
(1)   10/       0 :                     
(1)   11/       0 : =0H                 r0 = 0 																			; register names
(1)   12/       0 : =1H                 r1 = 1
(1)   13/       0 : =2H                 r2 = 2
(1)   14/       0 : =3H                 r3 = 3
(1)   15/       0 : =4H                 r4 = 4
(1)   16/       0 : =5H                 r5 = 5
(1)   17/       0 : =6H                 r6 = 6
(1)   18/       0 : =7H                 r7 = 7
(1)   19/       0 : =8H                 r8 = 8
(1)   20/       0 : =9H                 r9 = 9
(1)   21/       0 : =AH                 ra = 10
(1)   22/       0 : =BH                 rb = 11
(1)   23/       0 : =CH                 rc = 12
(1)   24/       0 : =DH                 rd = 13
(1)   25/       0 : =EH                 re = 14
(1)   26/       0 : =FH                 rf = 15
(1)   27/       0 :                     
(1)   28/       0 :                     lri Macro 	reg,address 														; load constant into 16 bit reg
(1)   29/       0 :                     	ldi 	(address)/256
(1)   30/       0 :                     	phi 	reg
(1)   31/       0 :                     	ldi 	(address)&255
(1)   32/       0 :                     	plo 	reg
(1)   33/       0 :                     	endm
(1)   34/       0 :                     
(1)   35/       0 :                     call Macro 	reg,address 														; call routine via mark.
(1)   36/       0 :                     	lri 	reg,address
(1)   37/       0 :                     	recall 	reg
(1)   38/       0 :                     	endm
(1)   39/       0 :                     
(1)   40/       0 :                     recall Macro reg 																; recall (re-entrant macro)
(1)   41/       0 :                     	mark
(1)   42/       0 :                     	sep 	reg
(1)   43/       0 :                     	dec 	r2
(1)   44/       0 :                     	endm
(1)   45/       0 :                     
(1)   46/       0 :                     return Macro 																	; return from routine
(1)   47/       0 :                     	sex 	r2
(1)   48/       0 :                     	inc 	r2
(1)   49/       0 :                     	ret
(1)   50/       0 :                     	endm
(1)   51/       0 :                     
(1)   52/       0 :                     
       3/       0 :                     
       4/       0 : =F00H               display = 	0F00h																; this page has the display in it
       5/       0 : =E00H               map = 		0E00h 																; this page has the map in it.
       6/       0 : =DF0H               stack = 	0DF0h 																; stack top
       7/       0 :                     
       8/       0 : =DF9H               ppvector =  0DF9h																; player position vector.
 AS V1.42 Beta [Bld 102] - source file game.asm - page 2 - 6/30/2016 22:27:01


       9/       0 : =DF8H               player = 	0DF8h 																; player offset in map
      10/       0 : =DF7H               direction = 0DF7h 																; 0 = right,1 = down, 2 = left, 3 = up
      11/       0 :                     
      12/       0 : 70                  	ret 																		; 1802 interrupts on. 
      13/       1 : C4                  	nop
      14/       2 : (MACRO)             	lri 	r1,Interrupt 														; set interrupt vector
      14/       2 : F8 01                       ldi     (INTERRUPT)/256
      14/       4 : B1                          phi     R1
      14/       5 : F8 02                       ldi     (INTERRUPT)&255
      14/       7 : A1                          plo     R1
      15/       8 : (MACRO)             	lri 	r2,Stack 															; set stack address
      15/       8 : F8 0D                       ldi     (STACK)/256
      15/       A : B2                          phi     R2
      15/       B : F8 F0                       ldi     (STACK)&255
      15/       D : A2                          plo     R2
      16/       E : F8 12               	ldi 	Main & 255 															; switch to R3 as program pointer
      17/      10 : A3                  	plo 	r3
      18/      11 : D3                  	sep 	r3 																	; go to main routine
      19/      12 :                     Main:
      20/      12 : E2                  	sex 	r2 																	; turn video on
      21/      13 : 69                  	inp		1
      22/      14 :                     
      23/      14 : (MACRO)             	call 	r4,CreateMaze
      23/      14 :  (MACRO-2)                  lri     R4,CREATEMAZE
      23/      14 : F8 01                       ldi     (CREATEMAZE)/256
      23/      16 : B4                          phi     R4
      23/      17 : F8 1E                       ldi     (CREATEMAZE)&255
      23/      19 : A4                          plo     R4
      23/      1A :  (MACRO-2)                  recall  R4
      23/      1A : 79                          mark
      23/      1B : D4                          sep     R4
      23/      1C : 22                          dec     r2
      24/      1D : (MACRO)             	call 	r4,ResetPlayer
      24/      1D :  (MACRO-2)                  lri     R4,RESETPLAYER
      24/      1D : F8 02                       ldi     (RESETPLAYER)/256
      24/      1F : B4                          phi     R4
      24/      20 : F8 3E                       ldi     (RESETPLAYER)&255
      24/      22 : A4                          plo     R4
      24/      23 :  (MACRO-2)                  recall  R4
      24/      23 : 79                          mark
      24/      24 : D4                          sep     R4
      24/      25 : 22                          dec     r2
      25/      26 :                     Repaint:
      26/      26 : (MACRO)             	call 	r4,RepaintDisplay 													; clear screen and draw walls
      26/      26 :  (MACRO-2)                  lri     R4,REPAINTDISPLAY
      26/      26 : F8 01                       ldi     (REPAINTDISPLAY)/256
      26/      28 : B4                          phi     R4
      26/      29 : F8 98                       ldi     (REPAINTDISPLAY)&255
      26/      2B : A4                          plo     R4
      26/      2C :  (MACRO-2)                  recall  R4
      26/      2C : 79                          mark
      26/      2D : D4                          sep     R4
      26/      2E : 22                          dec     r2
      27/      2F :                     
      28/      2F : (MACRO)             	lri 	rc,ppVector-1 														; point to player (vector -1)
      28/      2F : F8 0D                       ldi     (PPVECTOR-1)/256
      28/      31 : BC                          phi     RC
      28/      32 : F8 F8                       ldi     (PPVECTOR-1)&255
      28/      34 : AC                          plo     RC
      29/      35 : 0C                  	ldn 	rc 																	; read player position
 AS V1.42 Beta [Bld 102] - source file game.asm - page 3 - 6/30/2016 22:27:01


      30/      36 : 1C                  	inc 	rc
      31/      37 : 5C                  	str 	rc 																	; save in vector[0]
      32/      38 : 1C                  	inc 	rc 																	; set up vector to point to 1st element
      33/      39 : (MACRO)             	lri 	r4,DrawPlayerViewAtDepth 
      33/      39 : F8 02                       ldi     (DRAWPLAYERVIEWATDEPTH)/256
      33/      3B : B4                          phi     R4
      33/      3C : F8 79                       ldi     (DRAWPLAYERVIEWATDEPTH)&255
      33/      3E : A4                          plo     R4
      34/      3F :                     
      35/      3F : F8 00               	ldi 	0
      36/      41 : (MACRO)             	recall 	r4
      36/      41 : 79                          mark
      36/      42 : D4                          sep     R4
      36/      43 : 22                          dec     r2
      37/      44 : 33 59               	bdf 	__RepaintExit
      38/      46 : F8 01               	ldi 	1
      39/      48 : (MACRO)             	recall 	r4
      39/      48 : 79                          mark
      39/      49 : D4                          sep     R4
      39/      4A : 22                          dec     r2
      40/      4B : 33 59               	bdf 	__RepaintExit
      41/      4D : F8 02               	ldi 	2
      42/      4F : (MACRO)             	recall 	r4
      42/      4F : 79                          mark
      42/      50 : D4                          sep     R4
      42/      51 : 22                          dec     r2
      43/      52 : 33 59               	bdf 	__RepaintExit
      44/      54 : F8 03               	ldi 	3
      45/      56 : (MACRO)             	recall 	r4
      45/      56 : 79                          mark
      45/      57 : D4                          sep     R4
      45/      58 : 22                          dec     r2
      46/      59 :                     __RepaintExit:
      47/      59 : F8 F9               	ldi 	(ppVector & 255)													; fix up the vector pointer to [0]
      48/      5B : AC                  	plo 	rc
      49/      5C : 0C                  	ldn 	rc 																	; reread the first player position
      50/      5D : 2C                  	dec 	rc
      51/      5E : 5C                  	str 	rc 																	; update actual player position.
      52/      5F :                     
      53/      5F : (MACRO)             	call 	r4,MirrorDisplay 													; mirror top of display to bottom
      53/      5F :  (MACRO-2)                  lri     R4,MIRRORDISPLAY
      53/      5F : F8 01                       ldi     (MIRRORDISPLAY)/256
      53/      61 : B4                          phi     R4
      53/      62 : F8 E7                       ldi     (MIRRORDISPLAY)&255
      53/      64 : A4                          plo     R4
      53/      65 :  (MACRO-2)                  recall  R4
      53/      65 : 79                          mark
      53/      66 : D4                          sep     R4
      53/      67 : 22                          dec     r2
      54/      68 :                     
      55/      68 :                     	; draw princess
      56/      68 :                     	; draw status.
      57/      68 :                     
      58/      68 : (MACRO)             	lri 	r4,Direction
      58/      68 : F8 0D                       ldi     (DIRECTION)/256
      58/      6A : B4                          phi     R4
      58/      6B : F8 F7                       ldi     (DIRECTION)&255
      58/      6D : A4                          plo     R4
      59/      6E : 04                  	ldn 	r4
      60/      6F : FC 01               	adi 	1
 AS V1.42 Beta [Bld 102] - source file game.asm - page 4 - 6/30/2016 22:27:01


      61/      71 : FA 03               	ani 	3
      62/      73 : 54                  	str 	r4
      63/      74 :                     
      64/      74 : (MACRO)             	lri 	r4,40000
      64/      74 : F8 9C                       ldi     (40000)/256
      64/      76 : B4                          phi     R4
      64/      77 : F8 40                       ldi     (40000)&255
      64/      79 : A4                          plo     R4
      65/      7A :                     delay:
      66/      7A : 24                  	dec 	r4
      67/      7B : 94                  	ghi 	r4
      68/      7C : 3A 7A               	bnz 	delay	
      69/      7E : 30 26               	br 		Repaint
      70/      80 :                     wait:
      71/      80 : 30 80               	br 		wait
      72/      82 :                     
      73/     100 :                     	org 	100h
      74/     100 :                     
      75/     100 :                     code:
      76/     100 :                     ;
      77/     100 :                     ;	Block 0
      78/     100 :                     ;
      79/     100 :                     	include interrupt.asm														; screen driver ($1E)
(1)    1/     100 :                     ; ************************************************************************************************************
(1)    2/     100 :                     ; ************************************************************************************************************
(1)    3/     100 :                     ;
(1)    4/     100 :                     ;											1861 Display Routine
(1)    5/     100 :                     ;
(1)    6/     100 :                     ; ************************************************************************************************************
(1)    7/     100 :                     ; ************************************************************************************************************
(1)    8/     100 :                     
(1)    9/     100 :                     Return:
(1)   10/     100 : 72                  	ldxa 																		; restore D
(1)   11/     101 : 70                  	ret 																		; restore X,P
(1)   12/     102 :                     Interrupt:
(1)   13/     102 : 22                  	dec 	r2 																	; [2/2] save return XP on stack 
(1)   14/     103 : 78                  	sav 																		; [2/4]
(1)   15/     104 : 22                  	dec 	r2 																	; [2/6] save D on stack
(1)   16/     105 : 52                  	str 	r2																	; [2/8]
(1)   17/     106 : F8 0F               	ldi 	display/256 														; [2/10] set up R0.1
(1)   18/     108 : B0                  	phi 	r0 																	; [2/12]
(1)   19/     109 : F8 00               	ldi 	0 																	; [2/14] set up R0.0
(1)   20/     10B : A0                  	plo 	r0
(1)   21/     10C : C4                  	nop 																		; pad out cycles till rendering
(1)   22/     10D : C4                  	nop
(1)   23/     10E : C4                  	nop
(1)   24/     10F :                     Refresh:
(1)   25/     10F : 80                  	glo 	r0 																	; do four scan lines for each row
(1)   26/     110 : E2                  	sex 	r2
(1)   27/     111 :                     
(1)   28/     111 : E2                  	sex 	r2
(1)   29/     112 : 20                  	dec 	r0
(1)   30/     113 : A0                  	plo 	r0
(1)   31/     114 :                     
(1)   32/     114 : E2                  	sex 	r2
(1)   33/     115 : 20                  	dec 	r0
(1)   34/     116 : A0                  	plo 	r0
(1)   35/     117 :                     
(1)   36/     117 : E2                  	sex 	r2
(1)   37/     118 : 20                  	dec 	r0
 AS V1.42 Beta [Bld 102] - source file game.asm(interrupt.asm) - page 5 - 6/30/2016 22:27:01


(1)   38/     119 : A0                  	plo 	r0
(1)   39/     11A :                     
(1)   40/     11A : 3C 0F               	bn1 	Refresh 															; in emulator we never loop back
(1)   41/     11C : 30 00               	br 		Return
(1)   42/     11E :                     
      80/     11E :                     	include maze.asm 															; maze creator & RNG ($7B)
(1)    1/     11E :                     
(1)    2/     11E :                     
(1)    3/     11E :                     ; ************************************************************************************************************
(1)    4/     11E :                     ; ************************************************************************************************************
(1)    5/     11E :                     ;
(1)    6/     11E :                     ;												Maze Creator
(1)    7/     11E :                     ;
(1)    8/     11E :                     ;	Uses R5,RC,RD,RF.
(1)    9/     11E :                     ; ************************************************************************************************************
(1)   10/     11E :                     ; ************************************************************************************************************
(1)   11/     11E :                     
(1)   12/     11E : =80H                MAZE_Wall = 080h
(1)   13/     11E : =0H                 MAZE_Open = 000h
(1)   14/     11E : =1H                 MAZE_Princess = 001h
(1)   15/     11E :                     
(1)   16/     11E :                     CreateMaze:
(1)   17/     11E : E2                  	sex 	r2
(1)   18/     11F : (MACRO)             	lri 	rc,map 																; point RC to the map.
(1)   18/     11F : F8 0E                       ldi     (MAP)/256
(1)   18/     121 : BC                          phi     RC
(1)   18/     122 : F8 00                       ldi     (MAP)&255
(1)   18/     124 : AC                          plo     RC
(1)   19/     125 :                     __CMFill:
(1)   20/     125 : F8 80               	ldi 	MAZE_Wall 													 		; fill the map with solid walls.
(1)   21/     127 : 5C                  	str 	rc
(1)   22/     128 : 1C                  	inc 	rc
(1)   23/     129 : 8C                  	glo 	rc
(1)   24/     12A : 3A 25               	bnz 	__CMFill
(1)   25/     12C : (MACRO)             	lri 	rc,map+16+1 														; row 1 column 1
(1)   25/     12C : F8 0E                       ldi     (MAP+16+1)/256
(1)   25/     12E : BC                          phi     RC
(1)   25/     12F : F8 11                       ldi     (MAP+16+1)&255
(1)   25/     131 : AC                          plo     RC
(1)   26/     132 : (MACRO)             	lri 	r5,RandomNumber 													; r5 = random subroutine (runs in R4)
(1)   26/     132 : F8 01                       ldi     (RANDOMNUMBER)/256
(1)   26/     134 : B5                          phi     R5
(1)   26/     135 : F8 72                       ldi     (RANDOMNUMBER)&255
(1)   26/     137 : A5                          plo     R5
(1)   27/     138 :                     __CMGenerate:
(1)   28/     138 : 8C                  	glo 	rc 																	; do not overright right hand wall
(1)   29/     139 : FA 0F               	ani 	0Fh 
(1)   30/     13B : FB 0F               	xri 	0Fh
(1)   31/     13D : 32 69               	bz 		__CMNext
(1)   32/     13F :                     
(1)   33/     13F : 8C                  	glo 	rc  																; makes the checkerboard pattern.
(1)   34/     140 : FA 11               	ani	 	011h
(1)   35/     142 : FB 11               	xri 	011h 																
(1)   36/     144 : 3A 69               	bnz 	__CMNext
(1)   37/     146 : F8 00               	ldi 	MAZE_Open
(1)   38/     148 : 5C                  	str 	rc 																	; write 00 (maze open) here.
(1)   39/     149 :                     
(1)   40/     149 : (MACRO)             	recall 	r5																	; random number
(1)   40/     149 : 79                          mark
(1)   40/     14A : D5                          sep     R5
 AS V1.42 Beta [Bld 102] - source file game.asm(maze.asm) - page 6 - 6/30/2016 22:27:01


(1)   40/     14B : 22                          dec     r2
(1)   41/     14C : FA 0F               	ani 	15
(1)   42/     14E : FF 0B               	smi 	11 																	; check mod 16 < 11
(1)   43/     150 : 33 57               	bdf 	__CMNotRight
(1)   44/     152 : 1C                  	inc 	rc 																	; if so open square to right.
(1)   45/     153 : F8 00               	ldi 	MAZE_Open
(1)   46/     155 : 5C                  	str 	rc
(1)   47/     156 : 2C                  	dec 	rc
(1)   48/     157 :                     __CMNotRight:
(1)   49/     157 :                     
(1)   50/     157 : (MACRO)             	recall 	r5 																	; random number
(1)   50/     157 : 79                          mark
(1)   50/     158 : D5                          sep     R5
(1)   50/     159 : 22                          dec     r2
(1)   51/     15A : FA 0F               	ani 	15
(1)   52/     15C : FF 0B               	smi 	11 			 														; check mod 16 < 11
(1)   53/     15E : 33 69               	bdf 	__CMNotDown
(1)   54/     160 : 9C                  	ghi 	rc 																	; open square down - point RD to it
(1)   55/     161 : BD                  	phi 	rd
(1)   56/     162 : 8C                  	glo 	rc
(1)   57/     163 : FC 10               	adi 	16
(1)   58/     165 : AD                  	plo 	rd
(1)   59/     166 : F8 00               	ldi 	MAZE_Open 															; open that square
(1)   60/     168 : 5D                  	str 	rd
(1)   61/     169 :                     __CMNotDown:
(1)   62/     169 :                     
(1)   63/     169 :                     __CMNext:
(1)   64/     169 : 1C                  	inc 	rc 																	; next
(1)   65/     16A : 8C                  	glo 	rc
(1)   66/     16B : FB DF               	xri 	0DFh 																; reached bottom right ?
(1)   67/     16D : 3A 38               	bnz 	__CMGenerate
(1)   68/     16F : (MACRO)             	return
(1)   68/     16F : E2                          sex     r2
(1)   68/     170 : 12                          inc     r2
(1)   68/     171 : 70                          ret
(1)   69/     172 :                     
(1)   70/     172 :                     ; ************************************************************************************************************
(1)   71/     172 :                     ; ************************************************************************************************************
(1)   72/     172 :                     ;
(1)   73/     172 :                     ;							Random Number Generator - same as class LFSR in gen.py
(1)   74/     172 :                     ;
(1)   75/     172 :                     ;	uses RF. 
(1)   76/     172 :                     ; ************************************************************************************************************
(1)   77/     172 :                     ; ************************************************************************************************************
(1)   78/     172 :                     
(1)   79/     172 :                     RandomNumber:
(1)   80/     172 : (MACRO)             	lri 	rf,__RNHighM1+1
(1)   80/     172 : F8 01                       ldi     (__RNHIGHM1+1)/256
(1)   80/     174 : BF                          phi     RF
(1)   80/     175 : F8 79                       ldi     (__RNHIGHM1+1)&255
(1)   80/     177 : AF                          plo     RF
(1)   81/     178 :                     __RNHighM1:
(1)   82/     178 : F8 AC               	ldi 	0ACh																; get seeded value
(1)   83/     17A : F6                  	shr 																		; shift it right
(1)   84/     17B : 5F                  	str 	rf 																	; write it back
(1)   85/     17C : F8 80               	ldi 	(__RNLowM1+1) & 0FFh 												; change pointer
(1)   86/     17E : AF                  	plo 	rf
(1)   87/     17F :                     __RNLowM1:
(1)   88/     17F : F8 E1               	ldi 	0E1h 																; get upper seeded value
(1)   89/     181 : 76                  	shrc  																		; rotate it right and in
 AS V1.42 Beta [Bld 102] - source file game.asm(maze.asm) - page 7 - 6/30/2016 22:27:01


(1)   90/     182 : 5F                  	str 	rf 																	; write it back.
(1)   91/     183 : E2                  	sex 	r2																	; save at TOS
(1)   92/     184 : 52                  	str 	r2
(1)   93/     185 : 3B 8E               	bnf  	__RNNoToggle 														; if bit shifted out set
(1)   94/     187 :                     
(1)   95/     187 : F8 79               	ldi 	(__RNHighM1+1) & 0FFh												; exor the high bit with $B4
(1)   96/     189 : AF                  	plo 	rf
(1)   97/     18A : 0F                  	ldn 	rf
(1)   98/     18B : FB B4               	xri 	0B4h
(1)   99/     18D : 5F                  	str 	rf
(1)  100/     18E :                     __RNNoToggle:
(1)  101/     18E : 02                  	ldn 	r2 																	; read TOS.
(1)  102/     18F : FE                  	shl 																		; put bit 7 into DF
(1)  103/     190 : F8 00               	ldi 	0 																	; add 0 + (R2) + DF 
(1)  104/     192 : 74                  	adc 	
(1)  105/     193 : (MACRO)             	return 	
(1)  105/     193 : E2                          sex     r2
(1)  105/     194 : 12                          inc     r2
(1)  105/     195 : 70                          ret
(1)  106/     196 : 30 72               	br 		RandomNumber 														; is re-entrant.
(1)  107/     198 :                     
      81/     198 :                     	include repaint.asm 														; repaint outline/mirror ($64)
(1)    1/     198 :                     ; ************************************************************************************************************
(1)    2/     198 :                     ; ************************************************************************************************************
(1)    3/     198 :                     ;
(1)    4/     198 :                     ;						 	Draw the Outline Frame (with no doors) - top half only.
(1)    5/     198 :                     ;
(1)    6/     198 :                     ;	Uses RC,RD,RE,RF
(1)    7/     198 :                     ; ************************************************************************************************************
(1)    8/     198 :                     ; ************************************************************************************************************
(1)    9/     198 :                     
(1)   10/     198 :                     RepaintDisplay:
(1)   11/     198 : F8 0F               	ldi 	display/256 														; rc points to display position.
(1)   12/     19A : BC                  	phi 	rc 																	; so does rd as we're going to clear it
(1)   13/     19B : BD                  	phi 	rd 																	; the top half of the screen
(1)   14/     19C : F8 00               	ldi 	0
(1)   15/     19E : AC                  	plo 	rc
(1)   16/     19F : AD                  	plo 	rd
(1)   17/     1A0 :                     _RDClear:
(1)   18/     1A0 : 8C                  	glo 	rc 																	; rc.0 is zero
(1)   19/     1A1 : 5D                  	str 	rd 																	; fill display RAM with it.
(1)   20/     1A2 : 1D                  	inc 	rd
(1)   21/     1A3 : 8D                  	glo 	rd
(1)   22/     1A4 : FE                  	shl 																		; only do it half way as we copy
(1)   23/     1A5 : 3B A0               	bnf 	_RDClear 															; the bottom half.
(1)   24/     1A7 :                     
(1)   25/     1A7 :                     ; ************************************************************************************************************
(1)   26/     1A7 :                     ;									    Come back here to reset the masks
(1)   27/     1A7 :                     ; ************************************************************************************************************
(1)   28/     1A7 :                     
(1)   29/     1A7 :                     _RDResetMasks:
(1)   30/     1A7 : F8 C0               	ldi 	0C0h 																; rf.0 is 11000000 (left write)
(1)   31/     1A9 : AF                  	plo 	rf
(1)   32/     1AA : F8 03               	ldi 	3 																	; rf.1 is 00000011 (right write)
(1)   33/     1AC : BF                  	phi 	rf
(1)   34/     1AD :                     
(1)   35/     1AD :                     ; ************************************************************************************************************
(1)   36/     1AD :                     ;				Main repaint loop. rc points to the line position. rf.0 left mask rf.1 right mask
(1)   37/     1AD :                     ; ************************************************************************************************************
(1)   38/     1AD :                     
 AS V1.42 Beta [Bld 102] - source file game.asm(repaint.asm) - page 8 - 6/30/2016 22:27:01


(1)   39/     1AD :                     _RDLoop:
(1)   40/     1AD : 9C                  	ghi		rc 																	; copy rc.1 to rd.1 and re.1
(1)   41/     1AE : BD                  	phi 	rd 																	
(1)   42/     1AF : BE                  	phi 	re
(1)   43/     1B0 : 8C                  	glo 	rc 																	; are there no solid blocks yet ?
(1)   44/     1B1 : FA 07               	ani 	7
(1)   45/     1B3 : 32 C6               	bz 		_RDNoSolid
(1)   46/     1B5 :                     
(1)   47/     1B5 :                     ; ************************************************************************************************************
(1)   48/     1B5 :                     ;					This draws solid blocks - fill in a whole byte at a time, on left and right
(1)   49/     1B5 :                     ; ************************************************************************************************************
(1)   50/     1B5 :                     
(1)   51/     1B5 : 8C                  	glo 	rc 																	; rd.0 will point to left bit
(1)   52/     1B6 : AD                  	plo 	rd
(1)   53/     1B7 : FB 07               	xri 	7																	; rd.1 will point to right bit
(1)   54/     1B9 : AE                  	plo 	re																	
(1)   55/     1BA : 2D                  	dec 	rd
(1)   56/     1BB :                     
(1)   57/     1BB :                     _RDDrawByteBlocks:
(1)   58/     1BB : F8 FF               	ldi 	0FFh 																; write solid block on left.
(1)   59/     1BD : 5D                  	str 	rd
(1)   60/     1BE : 5E                  	str 	re
(1)   61/     1BF : 2D                  	dec 	rd 																	; move left left and right right
(1)   62/     1C0 : 1E                  	inc 	re
(1)   63/     1C1 : 8E                  	glo 	re 																	; if right hasn't wrapped around
(1)   64/     1C2 : FA 07               	ani 	7
(1)   65/     1C4 : 3A BB               	bnz 	_RDDrawByteBlocks
(1)   66/     1C6 :                     _RDNoSolid:
(1)   67/     1C6 :                     
(1)   68/     1C6 :                     ; ************************************************************************************************************
(1)   69/     1C6 :                     ;						This writes out the current masks and goes to the next line.
(1)   70/     1C6 :                     ; ************************************************************************************************************
(1)   71/     1C6 :                     
(1)   72/     1C6 : 8C                  	glo 	rc 																	; set rd and re to point to write
(1)   73/     1C7 : AD                  	plo 	rd
(1)   74/     1C8 : FB 07               	xri 	7
(1)   75/     1CA : AE                  	plo 	re
(1)   76/     1CB :                     
(1)   77/     1CB : 8C                  	glo 	rc 																	; point rc to the next line.
(1)   78/     1CC : FC 08               	adi 	8
(1)   79/     1CE : AC                  	plo 	rc
(1)   80/     1CF :                     
(1)   81/     1CF : 8F                  	glo 	rf																	; write left mask
(1)   82/     1D0 : 5D                  	str 	rd
(1)   83/     1D1 : F6                  	shr 																		; update the left mask.
(1)   84/     1D2 : F6                  	shr	
(1)   85/     1D3 : F9 C0               	ori 	0C0h
(1)   86/     1D5 : AF                  	plo 	rf
(1)   87/     1D6 :                     
(1)   88/     1D6 : 9F                  	ghi 	rf 																	; write right mask
(1)   89/     1D7 : 5E                  	str 	re
(1)   90/     1D8 : FE                  	shl 																		; update the right mask.
(1)   91/     1D9 : FE                  	shl 
(1)   92/     1DA : F9 03               	ori 	3
(1)   93/     1DC : BF                  	phi	 	rf
(1)   94/     1DD :                     
(1)   95/     1DD : 3B AD               	bnf 	_RDLoop
(1)   96/     1DF : 1C                  	inc 	rc 																	; step out 1.
(1)   97/     1E0 : 8C                  	glo 	rc 																	; if not half way down loop back.
(1)   98/     1E1 : 7E                  	shlc
 AS V1.42 Beta [Bld 102] - source file game.asm(repaint.asm) - page 9 - 6/30/2016 22:27:01


(1)   99/     1E2 : 3B A7               	bnf 	_RDResetMasks
(1)  100/     1E4 : (MACRO)             	return
(1)  100/     1E4 : E2                          sex     r2
(1)  100/     1E5 : 12                          inc     r2
(1)  100/     1E6 : 70                          ret
(1)  101/     1E7 :                     
(1)  102/     1E7 :                     ; ************************************************************************************************************
(1)  103/     1E7 :                     ; ************************************************************************************************************
(1)  104/     1E7 :                     ;
(1)  105/     1E7 :                     ;									Copy top half to bottom half upside down
(1)  106/     1E7 :                     ;
(1)  107/     1E7 :                     ;	Uses RE,RF
(1)  108/     1E7 :                     ; ************************************************************************************************************
(1)  109/     1E7 :                     ; ************************************************************************************************************
(1)  110/     1E7 :                     
(1)  111/     1E7 :                     MirrorDisplay:	
(1)  112/     1E7 : (MACRO)             	lri 	re,display 															; re points to screen top
(1)  112/     1E7 : F8 0F                       ldi     (DISPLAY)/256
(1)  112/     1E9 : BE                          phi     RE
(1)  112/     1EA : F8 00                       ldi     (DISPLAY)&255
(1)  112/     1EC : AE                          plo     RE
(1)  113/     1ED :                     _MDLoop:
(1)  114/     1ED : 8E                  	glo 	re 																	; set up bottom pointer rf
(1)  115/     1EE : FB F8               	xri 	0F8h
(1)  116/     1F0 : AF                  	plo 	rf	
(1)  117/     1F1 : 9E                  	ghi	 	re
(1)  118/     1F2 : BF                  	phi 	rf
(1)  119/     1F3 : 4E                  	lda 	re 																	; copy data bumping rc
(1)  120/     1F4 : 5F                  	str 	rf
(1)  121/     1F5 : 1F                  	inc 	rf
(1)  122/     1F6 : 8E                  	glo 	re
(1)  123/     1F7 : FE                  	shl 	
(1)  124/     1F8 : 3B ED               	bnf 	_MDLoop
(1)  125/     1FA : (MACRO)             	return
(1)  125/     1FA : E2                          sex     r2
(1)  125/     1FB : 12                          inc     r2
(1)  125/     1FC : 70                          ret
(1)  126/     1FD :                     
(1)  127/     1FD :                     
(1)  128/     1FD :                     		
      82/     1FD :                     ;
      83/     1FD :                     ;	Block 1
      84/     1FD :                     ;
      85/     200 :                     	org 	code+100h
      86/     200 :                     	include door.asm 															; door "opening" code. ($3C)
(1)    1/     200 :                     ; ************************************************************************************************************
(1)    2/     200 :                     ; ************************************************************************************************************
(1)    3/     200 :                     ;
(1)    4/     200 :                     ;												Door opening
(1)    5/     200 :                     ;
(1)    6/     200 :                     ;	Uses RE,RF
(1)    7/     200 :                     ; ************************************************************************************************************
(1)    8/     200 :                     ; ************************************************************************************************************
(1)    9/     200 :                     
(1)   10/     200 :                     DoorOpen:
(1)   11/     200 : AE                  	plo 	re 																	; save door position.
(1)   12/     201 : AF                  	plo 	rf 																	; ready to mask it at rf
(1)   13/     202 : FA 04               	ani 	4 																	; 0 for left, 4 for right.
(1)   14/     204 : 32 08               	bz 		__DOLeftMask
(1)   15/     206 : F8 81               	ldi 	081h 																
 AS V1.42 Beta [Bld 102] - source file game.asm(door.asm) - page 10 - 6/30/2016 22:27:01


(1)   16/     208 :                     __DOLeftMask:																	; 0 for left $81 for right	
(1)   17/     208 : FB 80               	xri 	080h 																; now $80 for left $01 for right
(1)   18/     20A : BE                  	phi 	re 																	; save in re.H
(1)   19/     20B : F8 0F               	ldi 	Display/256  														; finish setting up rf
(1)   20/     20D : BF                  	phi 	rf 
(1)   21/     20E : EF                  	sex 	rf
(1)   22/     20F :                     __DOMask:
(1)   23/     20F : 9E                  	ghi 	re 																	; get mask
(1)   24/     210 : F2                  	and 																		; and into screen.
(1)   25/     211 : 5F                  	str 	rf
(1)   26/     212 : 5F                  	str 	rf
(1)   27/     213 : 8F                  	glo 	rf 																	; next line
(1)   28/     214 : FC 08               	adi 	8
(1)   29/     216 : AF                  	plo 	rf
(1)   30/     217 : FE                  	shl
(1)   31/     218 : 3B 0F               	bnf 	__DOMask															; until done half the screen
(1)   32/     21A :                     
(1)   33/     21A : E2                  	sex 	r2 																	; X points to stack.
(1)   34/     21B : 8E                  	glo 	re 																	; get door position
(1)   35/     21C : FA 04               	ani 	4 																	; 0 if left 4 if right
(1)   36/     21E : 32 22               	bz 		__DONotRight
(1)   37/     220 : F8 07               	ldi 	7
(1)   38/     222 :                     __DONotRight:																	; 0 if left 7 if right
(1)   39/     222 : 52                  	str 	r2 																	; save at TOS.
(1)   40/     223 : 8E                  	glo 	re 																	; XOR with door position.
(1)   41/     224 : F3                  	xor 																		; so now D is distance in from edge.
(1)   42/     225 : FB 03               	xri 	3 																	; now distance from the middle.
(1)   43/     227 : FE                  	shl 																		; up four positions per depth.
(1)   44/     228 : FE                  	shl
(1)   45/     229 : 32 2D               	bz 		__DONoAdjust 														; -1 position
(1)   46/     22B : FF 01               	smi 	1
(1)   47/     22D :                     __DONoAdjust:
(1)   48/     22D : FE                  	shl 																		; multiply by 8 so index into Row
(1)   49/     22E : FE                  	shl	
(1)   50/     22F : FE                  	shl
(1)   51/     230 : 52                  	str 	r2 																	; save at R(X)
(1)   52/     231 :                     
(1)   53/     231 : 8E                  	glo 	re 																	; get door position
(1)   54/     232 : FC 78               	adi 	15*8 																; put half way down
(1)   55/     234 : F7                  	sm 																			; subtract offset
(1)   56/     235 :                     
(1)   57/     235 : AF                  	plo 	rf
(1)   58/     236 : F8 FF               	ldi	 	0FFh 																; put a solid bar there.
(1)   59/     238 : 5F                  	str 	rf
(1)   60/     239 : (MACRO)             	return
(1)   60/     239 : E2                          sex     r2
(1)   60/     23A : 12                          inc     r2
(1)   60/     23B : 70                          ret
(1)   61/     23C : 30 00               	br 		DoorOpen
      87/     23E :                     	include player.asm 															; player reset and depth view ()
(1)    1/     23E :                     ; ************************************************************************************************************
(1)    2/     23E :                     ; ************************************************************************************************************
(1)    3/     23E :                     ;
(1)    4/     23E :                     ;												Reset the Player
(1)    5/     23E :                     ;
(1)    6/     23E :                     ;	use RF.
(1)    7/     23E :                     ; ************************************************************************************************************
(1)    8/     23E :                     ; ************************************************************************************************************
(1)    9/     23E :                     
(1)   10/     23E :                     ResetPlayer:
 AS V1.42 Beta [Bld 102] - source file game.asm(player.asm) - page 11 - 6/30/2016 22:27:01


(1)   11/     23E : (MACRO)             	lri 	rf,Player 															; initialise pointer, use RF as index
(1)   11/     23E : F8 0D                       ldi     (PLAYER)/256
(1)   11/     240 : BF                          phi     RF
(1)   11/     241 : F8 F8                       ldi     (PLAYER)&255
(1)   11/     243 : AF                          plo     RF
(1)   12/     244 : EF                  	sex 	rf
(1)   13/     245 : F8 77               	ldi 	7*16+7																; player at (7,7)
(1)   14/     247 : 73                  	stxd
(1)   15/     248 : F8 02               	ldi 	2 																	; direction 2 
(1)   16/     24A : 73                  	stxd
(1)   17/     24B :                     
(1)   18/     24B : (MACRO)             	return
(1)   18/     24B : E2                          sex     r2
(1)   18/     24C : 12                          inc     r2
(1)   18/     24D : 70                          ret
(1)   19/     24E :                     
(1)   20/     24E :                     ; ************************************************************************************************************
(1)   21/     24E :                     ; ************************************************************************************************************
(1)   22/     24E :                     ;
(1)   23/     24E :                     ;						Get Player Position as a result of a move in current direction +/- n
(1)   24/     24E :                     ;										D is position RF points to the map
(1)   25/     24E :                     ;
(1)   26/     24E :                     ;	use RE,RF
(1)   27/     24E :                     ; ************************************************************************************************************
(1)   28/     24E :                     ; ************************************************************************************************************
(1)   29/     24E :                     
(1)   30/     24E :                     GetPlayerNextCurrent:
(1)   31/     24E : F8 00               	ldi 	0 																	; set offset to 0
(1)   32/     250 :                     GetPlayerNextOffset:
(1)   33/     250 : E2                  	sex 	r2
(1)   34/     251 : 52                  	str 	r2
(1)   35/     252 : (MACRO)             	lri 	rf,Direction 														; load player direction.
(1)   35/     252 : F8 0D                       ldi     (DIRECTION)/256
(1)   35/     254 : BF                          phi     RF
(1)   35/     255 : F8 F7                       ldi     (DIRECTION)&255
(1)   35/     257 : AF                          plo     RF
(1)   36/     258 : 0F                  	ldn 	rf
(1)   37/     259 : F4                  	add 	 																	; get into D + offset
(1)   38/     25A : FA 03               	ani 	3 																	; force into a position.
(1)   39/     25C : FC 75               	adi 	PlayerDirectionTable & 255 											; get an address in the table
(1)   40/     25E : AE                  	plo 	re 																	; point RE to that value.
(1)   41/     25F : F8 02               	ldi 	PlayerDirectionTable / 256
(1)   42/     261 : BE                  	phi 	re
(1)   43/     262 : (MACRO)             	lri 	rf,Player 															; point RF to the position.
(1)   43/     262 : F8 0D                       ldi     (PLAYER)/256
(1)   43/     264 : BF                          phi     RF
(1)   43/     265 : F8 F8                       ldi     (PLAYER)&255
(1)   43/     267 : AF                          plo     RF
(1)   44/     268 : EE                  	sex 	re 																	; R(X) points to the direction table
(1)   45/     269 : 0F                  	ldn 	rf 																	; read position
(1)   46/     26A : F4                  	add 																		; add direction and exit.
(1)   47/     26B : AF                  	plo 	rf 																	; put in RF
(1)   48/     26C : F8 0E               	ldi 	Map/256 	
(1)   49/     26E : BF                  	phi 	rf 																	; point RF to the map entry
(1)   50/     26F : 8F                  	glo 	rf 																	; restore D
(1)   51/     270 : (MACRO)             	return
(1)   51/     270 : E2                          sex     r2
(1)   51/     271 : 12                          inc     r2
(1)   51/     272 : 70                          ret
(1)   52/     273 : 30 50               	br 		GetPlayerNextOffset 												; re-entrant into next offset.
 AS V1.42 Beta [Bld 102] - source file game.asm(player.asm) - page 12 - 6/30/2016 22:27:01


(1)   53/     275 :                     
(1)   54/     275 :                     PlayerDirectionTable:
(1)   55/     275 : 01 10 FF F0         	db 		1,16,-1,-16 														; direction -> offset table.
(1)   56/     279 :                     
(1)   57/     279 :                     ; ************************************************************************************************************
(1)   58/     279 :                     ; ************************************************************************************************************
(1)   59/     279 :                     ;
(1)   60/     279 :                     ;		Draw player view at depth D (0 = outermost, 3 = innermost). Returns DF = 0 if can move forward.
(1)   61/     279 :                     ;		D returned unchanged. Store new position at (RC) and increment RC.
(1)   62/     279 :                     ;		  
(1)   63/     279 :                     ;	Uses GetPlayerNextOffset (RE/RF) and DoorOpen(RE/RF). Runs in R4.
(1)   64/     279 :                     ; ************************************************************************************************************
(1)   65/     279 :                     ; ************************************************************************************************************
(1)   66/     279 :                     
(1)   67/     279 :                     DrawPlayerViewAtDepth:
(1)   68/     279 : A6                  	plo 	r6 																	; save the depth in R6.
(1)   69/     27A :                     
(1)   70/     27A : (MACRO)             	lri 	r5,GetPlayerNextOffset												; call to identify left/right
(1)   70/     27A : F8 02                       ldi     (GETPLAYERNEXTOFFSET)/256
(1)   70/     27C : B5                          phi     R5
(1)   70/     27D : F8 50                       ldi     (GETPLAYERNEXTOFFSET)&255
(1)   70/     27F : A5                          plo     R5
(1)   71/     280 : F8 FF               	ldi 	-1 																	; can we look left ?
(1)   72/     282 : (MACRO)             	recall 	r5    
(1)   72/     282 : 79                          mark
(1)   72/     283 : D5                          sep     R5
(1)   72/     284 : 22                          dec     r2
(1)   73/     285 : 0F                  	ldn 	rf 																	; get what's there into R7.0
(1)   74/     286 : A7                  	plo 	r7
(1)   75/     287 : F8 01               	ldi 	1 																	; can we look right ?
(1)   76/     289 : (MACRO)             	recall 	r5
(1)   76/     289 : 79                          mark
(1)   76/     28A : D5                          sep     R5
(1)   76/     28B : 22                          dec     r2
(1)   77/     28C : 0F                  	ldn 	rf 																	; get what's there into R7.1
(1)   78/     28D : B7                  	phi 	r7
(1)   79/     28E : F8 00               	ldi 	0 																	; look ahead
(1)   80/     290 : (MACRO)             	recall 	r5
(1)   80/     290 : 79                          mark
(1)   80/     291 : D5                          sep     R5
(1)   80/     292 : 22                          dec     r2
(1)   81/     293 : 5C                  	str 	rc 																	; save position at (RC)
(1)   82/     294 : 0F                  	ldn 	rf 																	; get what's there into R8.0
(1)   83/     295 : A8                  	plo 	r8 	
(1)   84/     296 :                     
(1)   85/     296 : (MACRO)             	lri 	rf,Player 															; update the player position from R8.1
(1)   85/     296 : F8 0D                       ldi     (PLAYER)/256
(1)   85/     298 : BF                          phi     RF
(1)   85/     299 : F8 F8                       ldi     (PLAYER)&255
(1)   85/     29B : AF                          plo     RF
(1)   86/     29C : 0C                  	ldn 	rc 																	; read read position and update it
(1)   87/     29D : 5F                  	str 	rf
(1)   88/     29E : 1C                  	inc 	rc 																	; increment position vector pointer.
(1)   89/     29F :                     
(1)   90/     29F : (MACRO)             	lri 	r5,DoorOpen 														; prepare to show open door.
(1)   90/     29F : F8 02                       ldi     (DOOROPEN)/256
(1)   90/     2A1 : B5                          phi     R5
(1)   90/     2A2 : F8 00                       ldi     (DOOROPEN)&255
(1)   90/     2A4 : A5                          plo     R5
(1)   91/     2A5 : 87                  	glo 	r7 																	; wall on left side ?
 AS V1.42 Beta [Bld 102] - source file game.asm(player.asm) - page 13 - 6/30/2016 22:27:01


(1)   92/     2A6 : FE                  	shl
(1)   93/     2A7 : 33 AD               	bdf 	__DPVNoLeftWall
(1)   94/     2A9 : 86                  	glo 	r6 																	; open depth up
(1)   95/     2AA : (MACRO)             	recall 	r5 
(1)   95/     2AA : 79                          mark
(1)   95/     2AB : D5                          sep     R5
(1)   95/     2AC : 22                          dec     r2
(1)   96/     2AD :                     __DPVNoLeftWall:
(1)   97/     2AD : 97                  	ghi 	r7 																	; wall on right side ?
(1)   98/     2AE : FE                  	shl
(1)   99/     2AF : 33 B7               	bdf 	__DPVNoRightWall
(1)  100/     2B1 : 86                  	glo 	r6 																	; open 7-depth up.
(1)  101/     2B2 : FB 07               	xri 	7
(1)  102/     2B4 : (MACRO)             	recall 	r5
(1)  102/     2B4 : 79                          mark
(1)  102/     2B5 : D5                          sep     R5
(1)  102/     2B6 : 22                          dec     r2
(1)  103/     2B7 :                     __DPVNoRightWall:
(1)  104/     2B7 : 88                  	glo 	r8 																	; get what's in front.
(1)  105/     2B8 : FE                  	shl 
(1)  106/     2B9 : 3B E8               	bnf 	__DPVExit 															; if clear exit with DF = 0
(1)  107/     2BB :                     
(1)  108/     2BB : 86                  	glo 	r6 																	; calculate start position
(1)  109/     2BC : FC 01               	adi 	1 																	; move in one
(1)  110/     2BE : E2                  	sex 	r2 																	; depth * 8 + depth
(1)  111/     2BF : 52                  	str 	r2
(1)  112/     2C0 : FE                  	shl 																		; *8 * 4
(1)  113/     2C1 : FE                  	shl
(1)  114/     2C2 : FE                  	shl
(1)  115/     2C3 : FE                  	shl
(1)  116/     2C4 : FE                  	shl
(1)  117/     2C5 : F4                  	add 	 																	; *9
(1)  118/     2C6 : AF                  	plo 	rf 																	; set RF to point to first block. 
(1)  119/     2C7 : F8 0F               	ldi 	Display/256
(1)  120/     2C9 : BF                  	phi 	rf
(1)  121/     2CA : F8 FF               	ldi 	0FFh 																; set writing value to $AA
(1)  122/     2CC : AE                  	plo 	re
(1)  123/     2CD :                     __DPVDrawWall:
(1)  124/     2CD : 86                  	glo 	r6 																	; 0123 for depths
(1)  125/     2CE : FB 03               	xri 	3 																	; 3210 for depths
(1)  126/     2D0 : FE                  	shl 																		; 6420 for depths
(1)  127/     2D1 : 32 E5               	bz 		__DPVExitWall 														; if nothing to draw skip.
(1)  128/     2D3 : A7                  	plo 	r7
(1)  129/     2D4 : 8F                  	glo 	rf 																	; save the start position of row.
(1)  130/     2D5 : BE                  	phi 	re	
(1)  131/     2D6 :                     __DPVDrawLine:
(1)  132/     2D6 : 8E                  	glo 	re 																	; copy one wall piece over.
(1)  133/     2D7 : 5F                  	str 	rf
(1)  134/     2D8 : 1F                  	inc 	rf	
(1)  135/     2D9 : 27                  	dec 	r7 																	; do required number of times
(1)  136/     2DA : 87                  	glo 	r7
(1)  137/     2DB : 3A D6               	bnz 	__DPVDrawLine
(1)  138/     2DD : AE                  	plo 	re 																	; draw spaces from here on.
(1)  139/     2DE : 9E                  	ghi 	re 																	; get start of line RE.1
(1)  140/     2DF : FC 08               	adi 	8
(1)  141/     2E1 : AF                  	plo 	rf 																	; point RF.0 one line down.
(1)  142/     2E2 : FE                  	shl
(1)  143/     2E3 : 3B CD               	bnf 	__DPVDrawWall 														; go back if not reached half way.
(1)  144/     2E5 :                     __DPVExitWall:
(1)  145/     2E5 : F8 FF               	ldi 	0FFh 																; set DF.
 AS V1.42 Beta [Bld 102] - source file game.asm(player.asm) - page 14 - 6/30/2016 22:27:01


(1)  146/     2E7 : FE                  	shl
(1)  147/     2E8 :                     __DPVExit:
(1)  148/     2E8 : 86                  	glo 	r6 																	; restore D.
(1)  149/     2E9 : (MACRO)             	return
(1)  149/     2E9 : E2                          sex     r2
(1)  149/     2EA : 12                          inc     r2
(1)  149/     2EB : 70                          ret
(1)  150/     2EC : 30 79               	br 		DrawPlayerViewAtDepth
(1)  151/     2EE :                     
(1)  152/     2EE :                     
      88/     2EE :                     ;
      89/     2EE :                     ;	TODO: 	
      90/     2EE :                     ;			Put princesses in the maze.
      91/     2EE :                     ;			Add visual on princesses
      92/     2EE :                     ;			Add basic control ?
      93/     2EE :                     
 AS V1.42 Beta [Bld 102] - source file game.asm - page 15 - 6/30/2016 22:27:01


  symbol table (* = unused):
  ------------------------

*ARCHITECTURE :  i386-unknown-win32 - | *BIGENDIAN :                      0 - |
*BRANCHEXT :                      0 - | *CASESENSITIVE :                  0 - |
 CODE :                         100 C | *CONSTPI :        3.141592653589793 - |
 CREATEMAZE :                   11E C | *DATE :                   6/30/2016 - |
 DELAY :                         7A C |  DIRECTION :                    DF7 - |
 DISPLAY :                      F00 - |  DOOROPEN :                     200 C |
 DRAWPLAYERVIEWATDEPTH :        279 C | *FALSE :                          0 - |
*FULLPMMU :                       1 - | *GETPLAYERNEXTCURRENT :         24E C |
 GETPLAYERNEXTOFFSET :          250 C | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSRCMODE :                      0 - | *INSUPMODE :                      0 - |
 INTERRUPT :                    102 C | *LISTON :                         1 - |
*MACEXP :                         1 - |  MAIN :                          12 C |
 MAP :                          E00 - |  MAZE_OPEN :                      0 - |
*MAZE_PRINCESS :                  1 - |  MAZE_WALL :                     80 - |
 MIRRORDISPLAY :                1E7 C | *MOMCPU :                      1802 - |
*MOMCPUNAME :                  1802 - | *NESTMAX :                      100 - |
*PACKING :                        0 - | *PADDING :                        1 - |
 PLAYER :                       DF8 - |  PLAYERDIRECTIONTABLE :         275 C |
 PPVECTOR :                     DF9 - |  R0 :                             0 - |
 R1 :                             1 - |  R2 :                             2 - |
 R3 :                             3 - |  R4 :                             4 - |
 R5 :                             5 - |  R6 :                             6 - |
 R7 :                             7 - |  R8 :                             8 - |
*R9 :                             9 - | *RA :                             A - |
 RANDOMNUMBER :                 172 C | *RB :                             B - |
 RC :                             C - |  RD :                             D - |
 RE :                             E - |  REFRESH :                      10F C |
*RELAXED :                        0 - |  REPAINT :                       26 C |
 REPAINTDISPLAY :               198 C |  RESETPLAYER :                  23E C |
 RETURN :                       100 C |  RF :                             F - |
 STACK :                        DF0 - | *TIME :                    22:27:01 - |
*TRUE :                           1 - | *VERSION :                     142F - |
 WAIT :                          80 C |  _MDLOOP :                      1ED C |
 _RDCLEAR :                     1A0 C |  _RDDRAWBYTEBLOCKS :            1BB C |
 _RDLOOP :                      1AD C |  _RDNOSOLID :                   1C6 C |
 _RDRESETMASKS :                1A7 C |  __CMFILL :                     125 C |
 __CMGENERATE :                 138 C |  __CMNEXT :                     169 C |
 __CMNOTDOWN :                  169 C |  __CMNOTRIGHT :                 157 C |
 __DOLEFTMASK :                 208 C |  __DOMASK :                     20F C |
 __DONOADJUST :                 22D C |  __DONOTRIGHT :                 222 C |
 __DPVDRAWLINE :                2D6 C |  __DPVDRAWWALL :                2CD C |
 __DPVEXIT :                    2E8 C |  __DPVEXITWALL :                2E5 C |
 __DPVNOLEFTWALL :              2AD C |  __DPVNORIGHTWALL :             2B7 C |
 __REPAINTEXIT :                 59 C |  __RNHIGHM1 :                   178 C |
 __RNLOWM1 :                    17F C |  __RNNOTOGGLE :                 18E C |

     96 symbols
     33 unused symbols

 AS V1.42 Beta [Bld 102] - source file game.asm - page 16 - 6/30/2016 22:27:01


  defined macros:
  ---------------

CALL                                  | LRI                                  
RECALL                                | RETURN                               

      4 macros

 AS V1.42 Beta [Bld 102] - source file game.asm - page 17 - 6/30/2016 22:27:01


  codepages:
  ----------

STANDARD (0 changed characters)


0.02 seconds assembly time

    635 lines source file
    796 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
