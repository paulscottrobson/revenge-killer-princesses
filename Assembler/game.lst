 AS V1.42 Beta [Bld 102] - source file game.asm - page 1 - 7/2/2016 15:13:14


       1/       0 :                     ; ************************************************************************************************************
       2/       0 :                     ; ************************************************************************************************************
       3/       0 :                     ;
       4/       0 :                     ;									Revenge of the Killer Princesses
       5/       0 :                     ;									================================
       6/       0 :                     ;
       7/       0 :                     ;								  Written by Paul Robson June/July 2016
       8/       0 :                     ;	
       9/       0 :                     ;	  Written for the Cosmac VIP but should port to other 1802/1861 devices with sufficient RAM memory.
      10/       0 :                     ;	  Main porting issue is the keyboard routine.
      11/       0 :                     ;
      12/       0 :                     ; ************************************************************************************************************
      13/       0 :                     ; ************************************************************************************************************
      14/       0 :                     
      15/       0 :                     	include 1802.inc
(1)    1/       0 :                     ; ************************************************************************************************************
(1)    2/       0 :                     ; ************************************************************************************************************
(1)    3/       0 :                     ;
(1)    4/       0 :                     ;												1802 Generic Routines
(1)    5/       0 :                     ;
(1)    6/       0 :                     ; ************************************************************************************************************
(1)    7/       0 :                     ; ************************************************************************************************************
(1)    8/       0 :                     
(1)    9/       0 :                     	cpu 	1802
(1)   10/       0 :                     
(1)   11/       0 : =0H                 r0 = 0 																			; register names
(1)   12/       0 : =1H                 r1 = 1
(1)   13/       0 : =2H                 r2 = 2
(1)   14/       0 : =3H                 r3 = 3
(1)   15/       0 : =4H                 r4 = 4
(1)   16/       0 : =5H                 r5 = 5
(1)   17/       0 : =6H                 r6 = 6
(1)   18/       0 : =7H                 r7 = 7
(1)   19/       0 : =8H                 r8 = 8
(1)   20/       0 : =9H                 r9 = 9 						
(1)   21/       0 : =AH                 ra = 10
(1)   22/       0 : =BH                 rb = 11 																		; stops us using RB accidentally
(1)   23/       0 : =CH                 rc = 12
(1)   24/       0 : =DH                 rd = 13
(1)   25/       0 : =EH                 re = 14
(1)   26/       0 : =FH                 rf = 15
(1)   27/       0 :                     
(1)   28/       0 :                     lri Macro 	reg,address 														; load constant into 16 bit reg
(1)   29/       0 :                     	ldi 	(address)/256
(1)   30/       0 :                     	phi 	reg
(1)   31/       0 :                     	ldi 	(address)&255
(1)   32/       0 :                     	plo 	reg
(1)   33/       0 :                     	endm
(1)   34/       0 :                     
(1)   35/       0 :                     call Macro 	reg,address 														; call routine via mark.
(1)   36/       0 :                     	lri 	reg,address
(1)   37/       0 :                     	recall 	reg
(1)   38/       0 :                     	endm
(1)   39/       0 :                     
(1)   40/       0 :                     recall Macro reg 																; recall (re-entrant macro)
(1)   41/       0 :                     	mark
(1)   42/       0 :                     	sep 	reg
(1)   43/       0 :                     	dec 	r2
(1)   44/       0 :                     	endm
(1)   45/       0 :                     
 AS V1.42 Beta [Bld 102] - source file game.asm(1802.inc) - page 2 - 7/2/2016 15:13:14


(1)   46/       0 :                     return Macro 																	; return from routine
(1)   47/       0 :                     	sex 	r2
(1)   48/       0 :                     	inc 	r2
(1)   49/       0 :                     	ret
(1)   50/       0 :                     	endm
(1)   51/       0 :                     
(1)   52/       0 :                     
      16/       0 :                     
      17/       0 : =F00H               screen =  	0F00h																; this is the display screen.
      18/       0 : =E00H               buffer = 	0E00h																; this page has the buffer in it
      19/       0 : =D00H               map = 		0D00h 																; this page has the map in it.
      20/       0 : =CE8H               stack = 	0CE8h 																; stack top
      21/       0 :                     
      22/       0 : =CFCH               timers = 	0CFCh 																; 4 timers must end at page top.
      23/       0 : =CF4H               ppvector =  0CF4h																; player position vector.
      24/       0 : =CF3H               player = 	0CF3h 																; player offset in map
      25/       0 : =CF2H               direction = 0CF2h 																; 0 = right,1 = down, 2 = left, 3 = up
      26/       0 : =CF1H               kills10 =   0CF1h 																; dead princesses.
      27/       0 : =CF0H               kills01 = 	0CF0h
      28/       0 :                     
      29/       0 : =CFCH               moveTimer = timers 																; first timer controls move/turn.
      30/       0 : =CFDH               fireTimer = timers+1 															; second timer controls firing
      31/       0 :                     
      32/       0 : 70                  	ret 																		; 1802 interrupts on. 
      33/       1 : C4                  	nop
      34/       2 : (MACRO)             	lri 	r1,Interrupt 														; set interrupt vector
      34/       2 : F8 03                       ldi     (INTERRUPT)/256
      34/       4 : B1                          phi     R1
      34/       5 : F8 BE                       ldi     (INTERRUPT)&255
      34/       7 : A1                          plo     R1
      35/       8 : (MACRO)             	lri 	r2,Stack 															; set stack address
      35/       8 : F8 0C                       ldi     (STACK)/256
      35/       A : B2                          phi     R2
      35/       B : F8 E8                       ldi     (STACK)&255
      35/       D : A2                          plo     R2
      36/       E : F8 12               	ldi 	Main & 255 															; switch to R3 as program pointer
      37/      10 : A3                  	plo 	r3
      38/      11 : D3                  	sep 	r3 																	; go to main routine
      39/      12 :                     Main:
      40/      12 : E2                  	sex 	r2 																	; turn video on
      41/      13 : 69                  	inp		1
      42/      14 :                     
      43/      14 :                     ; ************************************************************************************************************
      44/      14 :                     ; ************************************************************************************************************
      45/      14 :                     ;
      46/      14 :                     ;											Initialisation code
      47/      14 :                     ;
      48/      14 :                     ; ************************************************************************************************************
      49/      14 :                     ; ************************************************************************************************************
      50/      14 :                     
      51/      14 : (MACRO)             	call 	r4,CreateMaze 														; create the maze
      51/      14 :  (MACRO-2)                  lri     R4,CREATEMAZE
      51/      14 : F8 01                       ldi     (CREATEMAZE)/256
      51/      16 : B4                          phi     R4
      51/      17 : F8 00                       ldi     (CREATEMAZE)&255
      51/      19 : A4                          plo     R4
      51/      1A :  (MACRO-2)                  recall  R4
      51/      1A : 79                          mark
      51/      1B : D4                          sep     R4
      51/      1C : 22                          dec     r2
 AS V1.42 Beta [Bld 102] - source file game.asm - page 3 - 7/2/2016 15:13:14


      52/      1D : (MACRO)             	call 	r4,ResetPlayer 														; reset the player
      52/      1D :  (MACRO-2)                  lri     R4,RESETPLAYER
      52/      1D : F8 02                       ldi     (RESETPLAYER)/256
      52/      1F : B4                          phi     R4
      52/      20 : F8 3E                       ldi     (RESETPLAYER)&255
      52/      22 : A4                          plo     R4
      52/      23 :  (MACRO-2)                  recall  R4
      52/      23 : 79                          mark
      52/      24 : D4                          sep     R4
      52/      25 : 22                          dec     r2
      53/      26 :                     
      54/      26 : (MACRO)             	lri 	r4, map+075h
      54/      26 : F8 0D                       ldi     (MAP+075H)/256
      54/      28 : B4                          phi     R4
      54/      29 : F8 75                       ldi     (MAP+075H)&255
      54/      2B : A4                          plo     R4
      55/      2C : F8 01               	ldi 	1
      56/      2E : 54                  	str 	r4
      57/      2F :                     
      58/      2F :                     Loop:
      59/      2F : (MACRO)             	call 	r4,Repaint
      59/      2F :  (MACRO-2)                  lri     R4,REPAINT
      59/      2F : F8 03                       ldi     (REPAINT)/256
      59/      31 : B4                          phi     R4
      59/      32 : F8 00                       ldi     (REPAINT)&255
      59/      34 : A4                          plo     R4
      59/      35 :  (MACRO-2)                  recall  R4
      59/      35 : 79                          mark
      59/      36 : D4                          sep     R4
      59/      37 : 22                          dec     r2
      60/      38 : (MACRO)             	call	r4,MovePlayer
      60/      38 :  (MACRO-2)                  lri     R4,MOVEPLAYER
      60/      38 : F8 04                       ldi     (MOVEPLAYER)/256
      60/      3A : B4                          phi     R4
      60/      3B : F8 00                       ldi     (MOVEPLAYER)&255
      60/      3D : A4                          plo     R4
      60/      3E :  (MACRO-2)                  recall  R4
      60/      3E : 79                          mark
      60/      3F : D4                          sep     R4
      60/      40 : 22                          dec     r2
      61/      41 : 30 2F               	br 		Loop
      62/      43 :                     
      63/     100 :                     	org 	100h
      64/     100 :                     
      65/     100 :                     code:
      66/     100 :                     ;
      67/     100 :                     ;	Block 0
      68/     100 :                     ;
      69/     100 :                     	include maze.asm 															; maze creator & RNG ($7B)
(1)    1/     100 :                     ; ************************************************************************************************************
(1)    2/     100 :                     ; ************************************************************************************************************
(1)    3/     100 :                     ;
(1)    4/     100 :                     ;												Maze Creator
(1)    5/     100 :                     ;
(1)    6/     100 :                     ;	Uses RB,RC,RD,RF.
(1)    7/     100 :                     ; ************************************************************************************************************
(1)    8/     100 :                     ; ************************************************************************************************************
(1)    9/     100 :                     
(1)   10/     100 : =80H                MAZE_Wall = 080h
(1)   11/     100 : =0H                 MAZE_Open = 000h
 AS V1.42 Beta [Bld 102] - source file game.asm(maze.asm) - page 4 - 7/2/2016 15:13:14


(1)   12/     100 : =1H                 MAZE_Princess = 001h
(1)   13/     100 :                     
(1)   14/     100 :                     CreateMaze:
(1)   15/     100 : E2                  	sex 	r2
(1)   16/     101 : (MACRO)             	lri 	rc,map 																; point RC to the map.
(1)   16/     101 : F8 0D                       ldi     (MAP)/256
(1)   16/     103 : BC                          phi     RC
(1)   16/     104 : F8 00                       ldi     (MAP)&255
(1)   16/     106 : AC                          plo     RC
(1)   17/     107 :                     __CMFill:
(1)   18/     107 : F8 80               	ldi 	MAZE_Wall 													 		; fill the map with solid walls.
(1)   19/     109 : 5C                  	str 	rc
(1)   20/     10A : 1C                  	inc 	rc
(1)   21/     10B : 8C                  	glo 	rc
(1)   22/     10C : 3A 07               	bnz 	__CMFill
(1)   23/     10E : (MACRO)             	lri 	rc,map+16+1 														; row 1 column 1
(1)   23/     10E : F8 0D                       ldi     (MAP+16+1)/256
(1)   23/     110 : BC                          phi     RC
(1)   23/     111 : F8 11                       ldi     (MAP+16+1)&255
(1)   23/     113 : AC                          plo     RC
(1)   24/     114 : (MACRO)             	lri 	rb,RandomNumber 													; r5 = random subroutine (runs in R4)
(1)   24/     114 : F8 01                       ldi     (RANDOMNUMBER)/256
(1)   24/     116 : BB                          phi     RB
(1)   24/     117 : F8 54                       ldi     (RANDOMNUMBER)&255
(1)   24/     119 : AB                          plo     RB
(1)   25/     11A :                     __CMGenerate:
(1)   26/     11A : 8C                  	glo 	rc 																	; do not overright right hand wall
(1)   27/     11B : FA 0F               	ani 	0Fh 
(1)   28/     11D : FB 0F               	xri 	0Fh
(1)   29/     11F : 32 4B               	bz 		__CMNext
(1)   30/     121 :                     
(1)   31/     121 : 8C                  	glo 	rc  																; makes the checkerboard pattern.
(1)   32/     122 : FA 11               	ani	 	011h
(1)   33/     124 : FB 11               	xri 	011h 																
(1)   34/     126 : 3A 4B               	bnz 	__CMNext
(1)   35/     128 : F8 00               	ldi 	MAZE_Open
(1)   36/     12A : 5C                  	str 	rc 																	; write 00 (maze open) here.
(1)   37/     12B :                     
(1)   38/     12B : (MACRO)             	recall 	rb																	; random number
(1)   38/     12B : 79                          mark
(1)   38/     12C : DB                          sep     RB
(1)   38/     12D : 22                          dec     r2
(1)   39/     12E : FA 0F               	ani 	15
(1)   40/     130 : FF 0B               	smi 	11 																	; check mod 16 < 11
(1)   41/     132 : 33 39               	bdf 	__CMNotRight
(1)   42/     134 : 1C                  	inc 	rc 																	; if so open square to right.
(1)   43/     135 : F8 00               	ldi 	MAZE_Open
(1)   44/     137 : 5C                  	str 	rc
(1)   45/     138 : 2C                  	dec 	rc
(1)   46/     139 :                     __CMNotRight:
(1)   47/     139 :                     
(1)   48/     139 : (MACRO)             	recall 	rb 																	; random number
(1)   48/     139 : 79                          mark
(1)   48/     13A : DB                          sep     RB
(1)   48/     13B : 22                          dec     r2
(1)   49/     13C : FA 0F               	ani 	15
(1)   50/     13E : FF 0B               	smi 	11 			 														; check mod 16 < 11
(1)   51/     140 : 33 4B               	bdf 	__CMNotDown
(1)   52/     142 : 9C                  	ghi 	rc 																	; open square down - point RD to it
(1)   53/     143 : BD                  	phi 	rd
 AS V1.42 Beta [Bld 102] - source file game.asm(maze.asm) - page 5 - 7/2/2016 15:13:14


(1)   54/     144 : 8C                  	glo 	rc
(1)   55/     145 : FC 10               	adi 	16
(1)   56/     147 : AD                  	plo 	rd
(1)   57/     148 : F8 00               	ldi 	MAZE_Open 															; open that square
(1)   58/     14A : 5D                  	str 	rd
(1)   59/     14B :                     __CMNotDown:
(1)   60/     14B :                     
(1)   61/     14B :                     __CMNext:
(1)   62/     14B : 1C                  	inc 	rc 																	; next
(1)   63/     14C : 8C                  	glo 	rc
(1)   64/     14D : FB DF               	xri 	0DFh 																; reached bottom right ?
(1)   65/     14F : 3A 1A               	bnz 	__CMGenerate
(1)   66/     151 : (MACRO)             	return
(1)   66/     151 : E2                          sex     r2
(1)   66/     152 : 12                          inc     r2
(1)   66/     153 : 70                          ret
(1)   67/     154 :                     
(1)   68/     154 :                     ; ************************************************************************************************************
(1)   69/     154 :                     ; ************************************************************************************************************
(1)   70/     154 :                     ;
(1)   71/     154 :                     ;							Random Number Generator - same as class LFSR in gen.py
(1)   72/     154 :                     ;
(1)   73/     154 :                     ;	uses RF. 
(1)   74/     154 :                     ; ************************************************************************************************************
(1)   75/     154 :                     ; ************************************************************************************************************
(1)   76/     154 :                     
(1)   77/     154 :                     RandomNumber:
(1)   78/     154 : (MACRO)             	lri 	rf,__RNHighM1+1
(1)   78/     154 : F8 01                       ldi     (__RNHIGHM1+1)/256
(1)   78/     156 : BF                          phi     RF
(1)   78/     157 : F8 5B                       ldi     (__RNHIGHM1+1)&255
(1)   78/     159 : AF                          plo     RF
(1)   79/     15A :                     __RNHighM1:
(1)   80/     15A : F8 AC               	ldi 	0ACh																; get seeded value
(1)   81/     15C : F6                  	shr 																		; shift it right
(1)   82/     15D : 5F                  	str 	rf 																	; write it back
(1)   83/     15E : F8 62               	ldi 	(__RNLowM1+1) & 0FFh 												; change pointer
(1)   84/     160 : AF                  	plo 	rf
(1)   85/     161 :                     __RNLowM1:
(1)   86/     161 : F8 E1               	ldi 	0E1h 																; get upper seeded value
(1)   87/     163 : 76                  	shrc  																		; rotate it right and in
(1)   88/     164 : 5F                  	str 	rf 																	; write it back.
(1)   89/     165 : E2                  	sex 	r2																	; save at TOS
(1)   90/     166 : 52                  	str 	r2
(1)   91/     167 : 3B 70               	bnf  	__RNNoToggle 														; if bit shifted out set
(1)   92/     169 :                     
(1)   93/     169 : F8 5B               	ldi 	(__RNHighM1+1) & 0FFh												; exor the high bit with $B4
(1)   94/     16B : AF                  	plo 	rf
(1)   95/     16C : 0F                  	ldn 	rf
(1)   96/     16D : FB B4               	xri 	0B4h
(1)   97/     16F : 5F                  	str 	rf
(1)   98/     170 :                     __RNNoToggle:
(1)   99/     170 : 02                  	ldn 	r2 																	; read TOS.
(1)  100/     171 : FE                  	shl 																		; put bit 7 into DF
(1)  101/     172 : F8 00               	ldi 	0 																	; add 0 + (R2) + DF 
(1)  102/     174 : 74                  	adc 	
(1)  103/     175 : (MACRO)             	return 	
(1)  103/     175 : E2                          sex     r2
(1)  103/     176 : 12                          inc     r2
(1)  103/     177 : 70                          ret
 AS V1.42 Beta [Bld 102] - source file game.asm(maze.asm) - page 6 - 7/2/2016 15:13:14


(1)  104/     178 : 30 54               	br 		RandomNumber 														; is re-entrant.
(1)  105/     17A :                     
      70/     17A :                     	include drawing.asm 														; repaint outline/mirror ($64)
(1)    1/     17A :                     ; ************************************************************************************************************
(1)    2/     17A :                     ; ************************************************************************************************************
(1)    3/     17A :                     ;
(1)    4/     17A :                     ;						 	Draw the Outline Frame (with no doors) - top half only.
(1)    5/     17A :                     ;
(1)    6/     17A :                     ;	Uses RC,RD,RE,RF
(1)    7/     17A :                     ; ************************************************************************************************************
(1)    8/     17A :                     ; ************************************************************************************************************
(1)    9/     17A :                     
(1)   10/     17A :                     RepaintDisplayOutline:
(1)   11/     17A : F8 0E               	ldi 	Buffer/256 															; rc points to display position.
(1)   12/     17C : BC                  	phi 	rc 																	; so does rd as we're going to clear it
(1)   13/     17D : BD                  	phi 	rd 																	; the top half of the screen
(1)   14/     17E : F8 00               	ldi 	0
(1)   15/     180 : AC                  	plo 	rc
(1)   16/     181 : AD                  	plo 	rd
(1)   17/     182 :                     _RDClear:
(1)   18/     182 : 8C                  	glo 	rc 																	; rc.0 is zero
(1)   19/     183 : 5D                  	str 	rd 																	; fill display RAM with it.
(1)   20/     184 : 1D                  	inc 	rd
(1)   21/     185 : 8D                  	glo 	rd
(1)   22/     186 : FE                  	shl 																		; only do it half way as we copy
(1)   23/     187 : 3B 82               	bnf 	_RDClear 															; the bottom half.
(1)   24/     189 :                     
(1)   25/     189 :                     ; ************************************************************************************************************
(1)   26/     189 :                     ;									    Come back here to reset the masks
(1)   27/     189 :                     ; ************************************************************************************************************
(1)   28/     189 :                     
(1)   29/     189 :                     _RDResetMasks:
(1)   30/     189 : F8 C0               	ldi 	0C0h 																; rf.0 is 11000000 (left write)
(1)   31/     18B : AF                  	plo 	rf
(1)   32/     18C : F8 03               	ldi 	3 																	; rf.1 is 00000011 (right write)
(1)   33/     18E : BF                  	phi 	rf
(1)   34/     18F :                     
(1)   35/     18F :                     ; ************************************************************************************************************
(1)   36/     18F :                     ;				Main repaint loop. rc points to the line position. rf.0 left mask rf.1 right mask
(1)   37/     18F :                     ; ************************************************************************************************************
(1)   38/     18F :                     
(1)   39/     18F :                     _RDLoop:
(1)   40/     18F : 9C                  	ghi		rc 																	; copy rc.1 to rd.1 and re.1
(1)   41/     190 : BD                  	phi 	rd 																	
(1)   42/     191 : BE                  	phi 	re
(1)   43/     192 : 8C                  	glo 	rc 																	; are there no solid blocks yet ?
(1)   44/     193 : FA 07               	ani 	7
(1)   45/     195 : 32 A8               	bz 		_RDNoSolid
(1)   46/     197 :                     
(1)   47/     197 :                     ; ************************************************************************************************************
(1)   48/     197 :                     ;					This draws solid blocks - fill in a whole byte at a time, on left and right
(1)   49/     197 :                     ; ************************************************************************************************************
(1)   50/     197 :                     
(1)   51/     197 : 8C                  	glo 	rc 																	; rd.0 will point to left bit
(1)   52/     198 : AD                  	plo 	rd
(1)   53/     199 : FB 07               	xri 	7																	; rd.1 will point to right bit
(1)   54/     19B : AE                  	plo 	re																	
(1)   55/     19C : 2D                  	dec 	rd
(1)   56/     19D :                     
(1)   57/     19D :                     _RDDrawByteBlocks:
 AS V1.42 Beta [Bld 102] - source file game.asm(drawing.asm) - page 7 - 7/2/2016 15:13:14


(1)   58/     19D : F8 FF               	ldi 	0FFh 																; write solid block on left.
(1)   59/     19F : 5D                  	str 	rd
(1)   60/     1A0 : 5E                  	str 	re
(1)   61/     1A1 : 2D                  	dec 	rd 																	; move left left and right right
(1)   62/     1A2 : 1E                  	inc 	re
(1)   63/     1A3 : 8E                  	glo 	re 																	; if right hasn't wrapped around
(1)   64/     1A4 : FA 07               	ani 	7
(1)   65/     1A6 : 3A 9D               	bnz 	_RDDrawByteBlocks
(1)   66/     1A8 :                     _RDNoSolid:
(1)   67/     1A8 :                     
(1)   68/     1A8 :                     ; ************************************************************************************************************
(1)   69/     1A8 :                     ;						This writes out the current masks and goes to the next line.
(1)   70/     1A8 :                     ; ************************************************************************************************************
(1)   71/     1A8 :                     
(1)   72/     1A8 : 8C                  	glo 	rc 																	; set rd and re to point to write
(1)   73/     1A9 : AD                  	plo 	rd
(1)   74/     1AA : FB 07               	xri 	7
(1)   75/     1AC : AE                  	plo 	re
(1)   76/     1AD :                     
(1)   77/     1AD : 8C                  	glo 	rc 																	; point rc to the next line.
(1)   78/     1AE : FC 08               	adi 	8
(1)   79/     1B0 : AC                  	plo 	rc
(1)   80/     1B1 :                     
(1)   81/     1B1 : 8F                  	glo 	rf																	; write left mask
(1)   82/     1B2 : 5D                  	str 	rd
(1)   83/     1B3 : F6                  	shr 																		; update the left mask.
(1)   84/     1B4 : F6                  	shr	
(1)   85/     1B5 : F9 C0               	ori 	0C0h
(1)   86/     1B7 : AF                  	plo 	rf
(1)   87/     1B8 :                     
(1)   88/     1B8 : 9F                  	ghi 	rf 																	; write right mask
(1)   89/     1B9 : 5E                  	str 	re
(1)   90/     1BA : FE                  	shl 																		; update the right mask.
(1)   91/     1BB : FE                  	shl 
(1)   92/     1BC : F9 03               	ori 	3
(1)   93/     1BE : BF                  	phi	 	rf
(1)   94/     1BF :                     
(1)   95/     1BF : 3B 8F               	bnf 	_RDLoop
(1)   96/     1C1 : 1C                  	inc 	rc 																	; step out 1.
(1)   97/     1C2 : 8C                  	glo 	rc 																	; if not half way down loop back.
(1)   98/     1C3 : 7E                  	shlc
(1)   99/     1C4 : 3B 89               	bnf 	_RDResetMasks
(1)  100/     1C6 : (MACRO)             	return
(1)  100/     1C6 : E2                          sex     r2
(1)  100/     1C7 : 12                          inc     r2
(1)  100/     1C8 : 70                          ret
(1)  101/     1C9 :                     
(1)  102/     1C9 :                     ; ************************************************************************************************************
(1)  103/     1C9 :                     ; ************************************************************************************************************
(1)  104/     1C9 :                     ;
(1)  105/     1C9 :                     ;									Copy top half to bottom half upside down
(1)  106/     1C9 :                     ;
(1)  107/     1C9 :                     ;	Uses RE,RF
(1)  108/     1C9 :                     ; ************************************************************************************************************
(1)  109/     1C9 :                     ; ************************************************************************************************************
(1)  110/     1C9 :                     
(1)  111/     1C9 :                     MirrorDisplay:	
(1)  112/     1C9 : (MACRO)             	lri 	re,Buffer 															; re points to screen top
(1)  112/     1C9 : F8 0E                       ldi     (BUFFER)/256
(1)  112/     1CB : BE                          phi     RE
 AS V1.42 Beta [Bld 102] - source file game.asm(drawing.asm) - page 8 - 7/2/2016 15:13:14


(1)  112/     1CC : F8 00                       ldi     (BUFFER)&255
(1)  112/     1CE : AE                          plo     RE
(1)  113/     1CF :                     _MDLoop:
(1)  114/     1CF : 8E                  	glo 	re 																	; set up bottom pointer rf
(1)  115/     1D0 : FB F8               	xri 	0F8h
(1)  116/     1D2 : AF                  	plo 	rf	
(1)  117/     1D3 : 9E                  	ghi	 	re
(1)  118/     1D4 : BF                  	phi 	rf
(1)  119/     1D5 : 4E                  	lda 	re 																	; copy data bumping rc
(1)  120/     1D6 : 5F                  	str 	rf
(1)  121/     1D7 : 1F                  	inc 	rf
(1)  122/     1D8 : 8E                  	glo 	re
(1)  123/     1D9 : FE                  	shl 	
(1)  124/     1DA : 3B CF               	bnf 	_MDLoop
(1)  125/     1DC : (MACRO)             	return
(1)  125/     1DC : E2                          sex     r2
(1)  125/     1DD : 12                          inc     r2
(1)  125/     1DE : 70                          ret
(1)  126/     1DF :                     
(1)  127/     1DF :                     
(1)  128/     1DF :                     		
      71/     1DF :                     ;
      72/     1DF :                     ;	Block 1
      73/     1DF :                     ;
      74/     200 :                     	org 	code+100h
      75/     200 :                     	include door.asm 															; door "opening" code. ($3C)
(1)    1/     200 :                     ; ************************************************************************************************************
(1)    2/     200 :                     ; ************************************************************************************************************
(1)    3/     200 :                     ;
(1)    4/     200 :                     ;												Door opening
(1)    5/     200 :                     ;
(1)    6/     200 :                     ;	Uses RE,RF
(1)    7/     200 :                     ; ************************************************************************************************************
(1)    8/     200 :                     ; ************************************************************************************************************
(1)    9/     200 :                     
(1)   10/     200 :                     DoorOpen:
(1)   11/     200 : AE                  	plo 	re 																	; save door position.
(1)   12/     201 : AF                  	plo 	rf 																	; ready to mask it at rf
(1)   13/     202 : FA 04               	ani 	4 																	; 0 for left, 4 for right.
(1)   14/     204 : 32 08               	bz 		__DOLeftMask
(1)   15/     206 : F8 81               	ldi 	081h 																
(1)   16/     208 :                     __DOLeftMask:																	; 0 for left $81 for right	
(1)   17/     208 : FB 80               	xri 	080h 																; now $80 for left $01 for right
(1)   18/     20A : BE                  	phi 	re 																	; save in re.H
(1)   19/     20B : F8 0E               	ldi 	Buffer/256  														; finish setting up rf
(1)   20/     20D : BF                  	phi 	rf 
(1)   21/     20E : EF                  	sex 	rf
(1)   22/     20F :                     __DOMask:
(1)   23/     20F : 9E                  	ghi 	re 																	; get mask
(1)   24/     210 : F2                  	and 																		; and into screen.
(1)   25/     211 : 5F                  	str 	rf
(1)   26/     212 : 5F                  	str 	rf
(1)   27/     213 : 8F                  	glo 	rf 																	; next line
(1)   28/     214 : FC 08               	adi 	8
(1)   29/     216 : AF                  	plo 	rf
(1)   30/     217 : FE                  	shl
(1)   31/     218 : 3B 0F               	bnf 	__DOMask															; until done half the screen
(1)   32/     21A :                     
(1)   33/     21A : E2                  	sex 	r2 																	; X points to stack.
(1)   34/     21B : 8E                  	glo 	re 																	; get door position
 AS V1.42 Beta [Bld 102] - source file game.asm(door.asm) - page 9 - 7/2/2016 15:13:14


(1)   35/     21C : FA 04               	ani 	4 																	; 0 if left 4 if right
(1)   36/     21E : 32 22               	bz 		__DONotRight
(1)   37/     220 : F8 07               	ldi 	7
(1)   38/     222 :                     __DONotRight:																	; 0 if left 7 if right
(1)   39/     222 : 52                  	str 	r2 																	; save at TOS.
(1)   40/     223 : 8E                  	glo 	re 																	; XOR with door position.
(1)   41/     224 : F3                  	xor 																		; so now D is distance in from edge.
(1)   42/     225 : FB 03               	xri 	3 																	; now distance from the middle.
(1)   43/     227 : FE                  	shl 																		; up four positions per depth.
(1)   44/     228 : FE                  	shl
(1)   45/     229 : 32 2D               	bz 		__DONoAdjust 														; -1 position
(1)   46/     22B : FF 01               	smi 	1
(1)   47/     22D :                     __DONoAdjust:
(1)   48/     22D : FE                  	shl 																		; multiply by 8 so index into Row
(1)   49/     22E : FE                  	shl	
(1)   50/     22F : FE                  	shl
(1)   51/     230 : 52                  	str 	r2 																	; save at R(X)
(1)   52/     231 :                     
(1)   53/     231 : 8E                  	glo 	re 																	; get door position
(1)   54/     232 : FC 78               	adi 	15*8 																; put half way down
(1)   55/     234 : F7                  	sm 																			; subtract offset
(1)   56/     235 :                     
(1)   57/     235 : AF                  	plo 	rf
(1)   58/     236 : F8 FF               	ldi	 	0FFh 																; put a solid bar there.
(1)   59/     238 : 5F                  	str 	rf
(1)   60/     239 : (MACRO)             	return
(1)   60/     239 : E2                          sex     r2
(1)   60/     23A : 12                          inc     r2
(1)   60/     23B : 70                          ret
(1)   61/     23C : 30 00               	br 		DoorOpen
      76/     23E :                     	include player.asm 															; player reset/depth view ($B0)
(1)    1/     23E :                     ; ************************************************************************************************************
(1)    2/     23E :                     ; ************************************************************************************************************
(1)    3/     23E :                     ;
(1)    4/     23E :                     ;												Reset the Player
(1)    5/     23E :                     ;
(1)    6/     23E :                     ;	use RF.
(1)    7/     23E :                     ; ************************************************************************************************************
(1)    8/     23E :                     ; ************************************************************************************************************
(1)    9/     23E :                     
(1)   10/     23E :                     ResetPlayer:
(1)   11/     23E : (MACRO)             	lri 	rf,Player 															; initialise pointer, use RF as index
(1)   11/     23E : F8 0C                       ldi     (PLAYER)/256
(1)   11/     240 : BF                          phi     RF
(1)   11/     241 : F8 F3                       ldi     (PLAYER)&255
(1)   11/     243 : AF                          plo     RF
(1)   12/     244 : EF                  	sex 	rf
(1)   13/     245 : F8 77               	ldi 	7*16+7																; player at (7,7)
(1)   14/     247 : 73                  	stxd
(1)   15/     248 : F8 02               	ldi 	2 																	; direction 2
(1)   16/     24A : 73                  	stxd
(1)   17/     24B : F8 00               	ldi 	0 	
(1)   18/     24D : 73                  	stxd 																		; kills 0 (2 digits)
(1)   19/     24E : 73                  	stxd 
(1)   20/     24F : F8 FF               	ldi 	0FFh 																; point to top of timers
(1)   21/     251 : AF                  	plo 	rf
(1)   22/     252 : F8 00               	ldi 	0h 																	; clear the four timers
(1)   23/     254 : 73                  	stxd
(1)   24/     255 : 73                  	stxd
(1)   25/     256 : 73                  	stxd
 AS V1.42 Beta [Bld 102] - source file game.asm(player.asm) - page 10 - 7/2/2016 15:13:14


(1)   26/     257 : 73                  	stxd
(1)   27/     258 : (MACRO)             	return
(1)   27/     258 : E2                          sex     r2
(1)   27/     259 : 12                          inc     r2
(1)   27/     25A : 70                          ret
(1)   28/     25B :                     
(1)   29/     25B :                     ; ************************************************************************************************************
(1)   30/     25B :                     ; ************************************************************************************************************
(1)   31/     25B :                     ;
(1)   32/     25B :                     ;						Get Player Position as a result of a move in current direction +/- n
(1)   33/     25B :                     ;										D is position RF points to the map
(1)   34/     25B :                     ;
(1)   35/     25B :                     ;	use RE,RF
(1)   36/     25B :                     ; ************************************************************************************************************
(1)   37/     25B :                     ; ************************************************************************************************************
(1)   38/     25B :                     
(1)   39/     25B :                     GetPlayerNextCurrent:
(1)   40/     25B : F8 00               	ldi 	0 																	; set offset to 0
(1)   41/     25D :                     GetPlayerNextOffset:
(1)   42/     25D : E2                  	sex 	r2
(1)   43/     25E : 52                  	str 	r2
(1)   44/     25F : (MACRO)             	lri 	rf,Direction 														; load player direction.
(1)   44/     25F : F8 0C                       ldi     (DIRECTION)/256
(1)   44/     261 : BF                          phi     RF
(1)   44/     262 : F8 F2                       ldi     (DIRECTION)&255
(1)   44/     264 : AF                          plo     RF
(1)   45/     265 : 0F                  	ldn 	rf
(1)   46/     266 : F4                  	add 	 																	; get into D + offset
(1)   47/     267 : FA 03               	ani 	3 																	; force into a position.
(1)   48/     269 : FC F7               	adi 	PlayerDirectionTable & 255 											; get an address in the table
(1)   49/     26B : AE                  	plo 	re 																	; point RE to that value.
(1)   50/     26C : F8 02               	ldi 	PlayerDirectionTable / 256
(1)   51/     26E : BE                  	phi 	re
(1)   52/     26F : (MACRO)             	lri 	rf,Player 															; point RF to the position.
(1)   52/     26F : F8 0C                       ldi     (PLAYER)/256
(1)   52/     271 : BF                          phi     RF
(1)   52/     272 : F8 F3                       ldi     (PLAYER)&255
(1)   52/     274 : AF                          plo     RF
(1)   53/     275 : EE                  	sex 	re 																	; R(X) points to the direction table
(1)   54/     276 : 0F                  	ldn 	rf 																	; read position
(1)   55/     277 : F4                  	add 																		; add direction and exit.
(1)   56/     278 : AF                  	plo 	rf 																	; put in RF
(1)   57/     279 : F8 0D               	ldi 	Map/256 	
(1)   58/     27B : BF                  	phi 	rf 																	; point RF to the map entry
(1)   59/     27C : 8F                  	glo 	rf 																	; restore D
(1)   60/     27D : (MACRO)             	return
(1)   60/     27D : E2                          sex     r2
(1)   60/     27E : 12                          inc     r2
(1)   60/     27F : 70                          ret
(1)   61/     280 : 30 5D               	br 		GetPlayerNextOffset 												; re-entrant into next offset.
(1)   62/     282 :                     
(1)   63/     282 :                     ; ************************************************************************************************************
(1)   64/     282 :                     ; ************************************************************************************************************
(1)   65/     282 :                     ;
(1)   66/     282 :                     ;		Draw player view at depth D (0 = outermost, 3 = innermost). Returns DF = 0 if can move forward.
(1)   67/     282 :                     ;		D returned unchanged. Store new position at (RC) and increment RC.
(1)   68/     282 :                     ;		  
(1)   69/     282 :                     ;	Uses RA,RB,RD GetPlayerNextOffset (RE/RF) and DoorOpen(RE/RF). 
(1)   70/     282 :                     ; ************************************************************************************************************
(1)   71/     282 :                     ; ************************************************************************************************************
 AS V1.42 Beta [Bld 102] - source file game.asm(player.asm) - page 11 - 7/2/2016 15:13:14


(1)   72/     282 :                     
(1)   73/     282 :                     DrawPlayerViewAtDepth:
(1)   74/     282 : BA                  	phi 	ra 																	; save the depth in ra.1
(1)   75/     283 :                     
(1)   76/     283 : (MACRO)             	lri 	rd,GetPlayerNextOffset												; call to identify left/right
(1)   76/     283 : F8 02                       ldi     (GETPLAYERNEXTOFFSET)/256
(1)   76/     285 : BD                          phi     RD
(1)   76/     286 : F8 5D                       ldi     (GETPLAYERNEXTOFFSET)&255
(1)   76/     288 : AD                          plo     RD
(1)   77/     289 : F8 FF               	ldi 	-1 																	; can we look left ?
(1)   78/     28B : (MACRO)             	recall 	rd    
(1)   78/     28B : 79                          mark
(1)   78/     28C : DD                          sep     RD
(1)   78/     28D : 22                          dec     r2
(1)   79/     28E : 0F                  	ldn 	rf 																	; get what's there into rb.0
(1)   80/     28F : AB                  	plo 	rb
(1)   81/     290 : F8 01               	ldi 	1 																	; can we look right ?
(1)   82/     292 : (MACRO)             	recall 	rd
(1)   82/     292 : 79                          mark
(1)   82/     293 : DD                          sep     RD
(1)   82/     294 : 22                          dec     r2
(1)   83/     295 : 0F                  	ldn 	rf 																	; get what's there into rb.1
(1)   84/     296 : BB                  	phi 	rb
(1)   85/     297 : F8 00               	ldi 	0 																	; look ahead
(1)   86/     299 : (MACRO)             	recall 	rd
(1)   86/     299 : 79                          mark
(1)   86/     29A : DD                          sep     RD
(1)   86/     29B : 22                          dec     r2
(1)   87/     29C : 5C                  	str 	rc 																	; save position at (RC)
(1)   88/     29D : 0F                  	ldn 	rf 																	; get what's there into ra.0
(1)   89/     29E : AA                  	plo 	ra 	
(1)   90/     29F :                     
(1)   91/     29F : (MACRO)             	lri 	rf,Player 															; update the player position from ra.1
(1)   91/     29F : F8 0C                       ldi     (PLAYER)/256
(1)   91/     2A1 : BF                          phi     RF
(1)   91/     2A2 : F8 F3                       ldi     (PLAYER)&255
(1)   91/     2A4 : AF                          plo     RF
(1)   92/     2A5 : 0C                  	ldn 	rc 																	; read read position and update it
(1)   93/     2A6 : 5F                  	str 	rf
(1)   94/     2A7 : 1C                  	inc 	rc 																	; increment position vector pointer.
(1)   95/     2A8 :                     
(1)   96/     2A8 : (MACRO)             	lri 	rd,DoorOpen 														; prepare to show open door.
(1)   96/     2A8 : F8 02                       ldi     (DOOROPEN)/256
(1)   96/     2AA : BD                          phi     RD
(1)   96/     2AB : F8 00                       ldi     (DOOROPEN)&255
(1)   96/     2AD : AD                          plo     RD
(1)   97/     2AE : 8B                  	glo 	rb 																	; wall on left side ?
(1)   98/     2AF : FE                  	shl
(1)   99/     2B0 : 33 B6               	bdf 	__DPVNoLeftWall
(1)  100/     2B2 : 9A                  	ghi 	ra 																	; open depth up
(1)  101/     2B3 : (MACRO)             	recall 	rd 
(1)  101/     2B3 : 79                          mark
(1)  101/     2B4 : DD                          sep     RD
(1)  101/     2B5 : 22                          dec     r2
(1)  102/     2B6 :                     __DPVNoLeftWall:
(1)  103/     2B6 : 9B                  	ghi 	rb 																	; wall on right side ?
(1)  104/     2B7 : FE                  	shl
(1)  105/     2B8 : 33 C0               	bdf 	__DPVNoRightWall
(1)  106/     2BA : 9A                  	ghi 	ra 																	; open 7-depth up.
(1)  107/     2BB : FB 07               	xri 	7
 AS V1.42 Beta [Bld 102] - source file game.asm(player.asm) - page 12 - 7/2/2016 15:13:14


(1)  108/     2BD : (MACRO)             	recall 	rd
(1)  108/     2BD : 79                          mark
(1)  108/     2BE : DD                          sep     RD
(1)  108/     2BF : 22                          dec     r2
(1)  109/     2C0 :                     __DPVNoRightWall:
(1)  110/     2C0 : 8A                  	glo 	ra 																	; get what's in front.
(1)  111/     2C1 : FE                  	shl 
(1)  112/     2C2 : 3B F1               	bnf 	__DPVExit 															; if clear exit with DF = 0
(1)  113/     2C4 :                     
(1)  114/     2C4 : 9A                  	ghi 	ra 																	; calculate start position
(1)  115/     2C5 : FC 01               	adi 	1 																	; move in one
(1)  116/     2C7 : E2                  	sex 	r2 																	; depth * 8 + depth
(1)  117/     2C8 : 52                  	str 	r2
(1)  118/     2C9 : FE                  	shl 																		; *8 * 4
(1)  119/     2CA : FE                  	shl
(1)  120/     2CB : FE                  	shl
(1)  121/     2CC : FE                  	shl
(1)  122/     2CD : FE                  	shl
(1)  123/     2CE : F4                  	add 	 																	; *9
(1)  124/     2CF : AF                  	plo 	rf 																	; set RF to point to first block. 
(1)  125/     2D0 : F8 0E               	ldi 	Buffer/256
(1)  126/     2D2 : BF                  	phi 	rf
(1)  127/     2D3 : F8 FF               	ldi 	0FFh 																; set writing value to $AA
(1)  128/     2D5 : AE                  	plo 	re
(1)  129/     2D6 :                     __DPVDrawWall:
(1)  130/     2D6 : 9A                  	ghi 	ra 																	; 0123 for depths
(1)  131/     2D7 : FB 03               	xri 	3 																	; 3210 for depths
(1)  132/     2D9 : FE                  	shl 																		; 6420 for depths
(1)  133/     2DA : 32 EE               	bz 		__DPVExitWall 														; if nothing to draw skip.
(1)  134/     2DC : AB                  	plo 	rb
(1)  135/     2DD : 8F                  	glo 	rf 																	; save the start position of row.
(1)  136/     2DE : BE                  	phi 	re	
(1)  137/     2DF :                     __DPVDrawLine:
(1)  138/     2DF : 8E                  	glo 	re 																	; copy one wall piece over.
(1)  139/     2E0 : 5F                  	str 	rf
(1)  140/     2E1 : 1F                  	inc 	rf	
(1)  141/     2E2 : 2B                  	dec 	rb 																	; do required number of times
(1)  142/     2E3 : 8B                  	glo 	rb
(1)  143/     2E4 : 3A DF               	bnz 	__DPVDrawLine
(1)  144/     2E6 : AE                  	plo 	re 																	; draw spaces from here on.
(1)  145/     2E7 : 9E                  	ghi 	re 																	; get start of line RE.1
(1)  146/     2E8 : FC 08               	adi 	8
(1)  147/     2EA : AF                  	plo 	rf 																	; point RF.0 one line down.
(1)  148/     2EB : FE                  	shl
(1)  149/     2EC : 3B D6               	bnf 	__DPVDrawWall 														; go back if not reached half way.
(1)  150/     2EE :                     __DPVExitWall:
(1)  151/     2EE : F8 FF               	ldi 	0FFh 																; set DF.
(1)  152/     2F0 : FE                  	shl
(1)  153/     2F1 :                     __DPVExit:
(1)  154/     2F1 : 9A                  	ghi 	ra 																	; restore D.
(1)  155/     2F2 : (MACRO)             	return
(1)  155/     2F2 : E2                          sex     r2
(1)  155/     2F3 : 12                          inc     r2
(1)  155/     2F4 : 70                          ret
(1)  156/     2F5 : 30 82               	br 		DrawPlayerViewAtDepth
(1)  157/     2F7 :                     
(1)  158/     2F7 :                     PlayerDirectionTable:
(1)  159/     2F7 : 01 10 FF F0         	db 		1,16,-1,-16 														; direction -> offset table.
(1)  160/     2FB :                     
      77/     2FB :                     ;
 AS V1.42 Beta [Bld 102] - source file game.asm - page 13 - 7/2/2016 15:13:14


      78/     2FB :                     ;	Block 2
      79/     2FB :                     ;
      80/     300 :                     	org	 	code+200h
      81/     300 :                     	include repaint.asm 														; repaint ($8B)
(1)    1/     300 :                     ; ************************************************************************************************************
(1)    2/     300 :                     ; ************************************************************************************************************
(1)    3/     300 :                     ;
(1)    4/     300 :                     ;								Repaint whole display. No registers guaranteed
(1)    5/     300 :                     ;	
(1)    6/     300 :                     ; ************************************************************************************************************
(1)    7/     300 :                     ; ************************************************************************************************************
(1)    8/     300 :                     
(1)    9/     300 :                     Repaint:
(1)   10/     300 : (MACRO)             	call 	r5,RepaintDisplayOutline 											; clear screen and draw walls
(1)   10/     300 :  (MACRO-2)                  lri     R5,REPAINTDISPLAYOUTLINE
(1)   10/     300 : F8 01                       ldi     (REPAINTDISPLAYOUTLINE)/256
(1)   10/     302 : B5                          phi     R5
(1)   10/     303 : F8 7A                       ldi     (REPAINTDISPLAYOUTLINE)&255
(1)   10/     305 : A5                          plo     R5
(1)   10/     306 :  (MACRO-2)                  recall  R5
(1)   10/     306 : 79                          mark
(1)   10/     307 : D5                          sep     R5
(1)   10/     308 : 22                          dec     r2
(1)   11/     309 :                     
(1)   12/     309 : (MACRO)             	lri 	rc,ppVector-1 														; point to player (vector -1)
(1)   12/     309 : F8 0C                       ldi     (PPVECTOR-1)/256
(1)   12/     30B : BC                          phi     RC
(1)   12/     30C : F8 F3                       ldi     (PPVECTOR-1)&255
(1)   12/     30E : AC                          plo     RC
(1)   13/     30F : 0C                  	ldn 	rc 																	; read player position
(1)   14/     310 : 1C                  	inc 	rc
(1)   15/     311 : 5C                  	str 	rc 																	; save in vector[0]
(1)   16/     312 : 1C                  	inc 	rc 																	; set up vector to point to 1st element
(1)   17/     313 :                     
(1)   18/     313 : (MACRO)             	lri 	r5,DrawPlayerViewAtDepth 											; draw maze at given depth
(1)   18/     313 : F8 02                       ldi     (DRAWPLAYERVIEWATDEPTH)/256
(1)   18/     315 : B5                          phi     R5
(1)   18/     316 : F8 82                       ldi     (DRAWPLAYERVIEWATDEPTH)&255
(1)   18/     318 : A5                          plo     R5
(1)   19/     319 : F8 00               	ldi 	0 																	; draw at each level
(1)   20/     31B : (MACRO)             	recall 	r5
(1)   20/     31B : 79                          mark
(1)   20/     31C : D5                          sep     R5
(1)   20/     31D : 22                          dec     r2
(1)   21/     31E : 33 33               	bdf 	__RepaintExit 														; abandon draw on solid wall
(1)   22/     320 : F8 01               	ldi 	1
(1)   23/     322 : (MACRO)             	recall 	r5
(1)   23/     322 : 79                          mark
(1)   23/     323 : D5                          sep     R5
(1)   23/     324 : 22                          dec     r2
(1)   24/     325 : 33 33               	bdf 	__RepaintExit
(1)   25/     327 : F8 02               	ldi 	2
(1)   26/     329 : (MACRO)             	recall 	r5
(1)   26/     329 : 79                          mark
(1)   26/     32A : D5                          sep     R5
(1)   26/     32B : 22                          dec     r2
(1)   27/     32C : 33 33               	bdf 	__RepaintExit
(1)   28/     32E : F8 03               	ldi 	3
(1)   29/     330 : (MACRO)             	recall 	r5
(1)   29/     330 : 79                          mark
 AS V1.42 Beta [Bld 102] - source file game.asm(repaint.asm) - page 14 - 7/2/2016 15:13:14


(1)   29/     331 : D5                          sep     R5
(1)   29/     332 : 22                          dec     r2
(1)   30/     333 :                     __RepaintExit:
(1)   31/     333 :                     
(1)   32/     333 : F8 F4               	ldi 	(ppVector & 255)													; fix up the vector pointer to [0]
(1)   33/     335 : AC                  	plo 	rc
(1)   34/     336 : 0C                  	ldn 	rc 																	; reread the first player position
(1)   35/     337 : 2C                  	dec 	rc 																	; we changed it so copy it from the vector
(1)   36/     338 : 5C                  	str 	rc 																	; update actual player position.
(1)   37/     339 :                     
(1)   38/     339 : (MACRO)             	call 	r5,MirrorDisplay 													; mirror top of display to bottom
(1)   38/     339 :  (MACRO-2)                  lri     R5,MIRRORDISPLAY
(1)   38/     339 : F8 01                       ldi     (MIRRORDISPLAY)/256
(1)   38/     33B : B5                          phi     R5
(1)   38/     33C : F8 C9                       ldi     (MIRRORDISPLAY)&255
(1)   38/     33E : A5                          plo     R5
(1)   38/     33F :  (MACRO-2)                  recall  R5
(1)   38/     33F : 79                          mark
(1)   38/     340 : D5                          sep     R5
(1)   38/     341 : 22                          dec     r2
(1)   39/     342 :                     
(1)   40/     342 : (MACRO)             	lri 	rc,ppVector 														; point RC to the positional vector.
(1)   40/     342 : F8 0C                       ldi     (PPVECTOR)/256
(1)   40/     344 : BC                          phi     RC
(1)   40/     345 : F8 F4                       ldi     (PPVECTOR)&255
(1)   40/     347 : AC                          plo     RC
(1)   41/     348 :                     __RPFindPrincess:
(1)   42/     348 : 4C                  	lda 	rc 																	; get the position to check
(1)   43/     349 : AD                  	plo 	rd 																	; make RD point to the map entry.
(1)   44/     34A : F8 0D               	ldi 	map/256
(1)   45/     34C : BD                  	phi 	rd 																	
(1)   46/     34D : 0D                  	ldn 	rd 																	; read what's there.
(1)   47/     34E : FA 7F               	ani 	7Fh 																; drop bit 7
(1)   48/     350 : 3A 5D               	bnz 	__RPFoundPrincess 													; if true, then found princess
(1)   49/     352 : 0D                  	ldn 	rd 																	; reload and look at bit 7
(1)   50/     353 : FE                  	shl
(1)   51/     354 : 33 6D               	bdf 	__RPStatus 															; if found a wall don't look further
(1)   52/     356 : 8C                  	glo 	rc 
(1)   53/     357 : FB F8               	xri 	(ppVector+4) & 255
(1)   54/     359 : 3A 48               	bnz 	__RPFindPrincess 													; not done 4, try next square.
(1)   55/     35B : 30 6D               	br 		__RPStatus
(1)   56/     35D :                     
(1)   57/     35D :                     __RPFoundPrincess:
(1)   58/     35D : (MACRO)             	lri 	rd,DrawSpriteGraphic 												; RD to sprite drawer.
(1)   58/     35D : F8 03                       ldi     (DRAWSPRITEGRAPHIC)/256
(1)   58/     35F : BD                          phi     RD
(1)   58/     360 : F8 8C                       ldi     (DRAWSPRITEGRAPHIC)&255
(1)   58/     362 : AD                          plo     RD
(1)   59/     363 : 8C                  	glo 	rc 																	; calculate offset in vector
(1)   60/     364 : FF F5               	smi 	(ppVector & 255)+1
(1)   61/     366 : FE                  	shl 																		; x 2, 2 sprites per princess
(1)   62/     367 : (MACRO)             	recall 	rd
(1)   62/     367 : 79                          mark
(1)   62/     368 : DD                          sep     RD
(1)   62/     369 : 22                          dec     r2
(1)   63/     36A : (MACRO)             	recall 	rd
(1)   63/     36A : 79                          mark
(1)   63/     36B : DD                          sep     RD
(1)   63/     36C : 22                          dec     r2
(1)   64/     36D :                     
 AS V1.42 Beta [Bld 102] - source file game.asm(repaint.asm) - page 15 - 7/2/2016 15:13:14


(1)   65/     36D :                     __RPStatus:
(1)   66/     36D :                     	; draw status.
(1)   67/     36D :                     
(1)   68/     36D : F8 0F               	ldi 	Screen/256 															; not double buffered ?
(1)   69/     36F : FB 0E               	xri 	Buffer/256
(1)   70/     371 : 32 89               	bz 		__RepaintNoCopy
(1)   71/     373 :                     
(1)   72/     373 : (MACRO)             	lri 	rf,Screen 															; copy buffer to screen.
(1)   72/     373 : F8 0F                       ldi     (SCREEN)/256
(1)   72/     375 : BF                          phi     RF
(1)   72/     376 : F8 00                       ldi     (SCREEN)&255
(1)   72/     378 : AF                          plo     RF
(1)   73/     379 : (MACRO)             	lri 	re,Buffer
(1)   73/     379 : F8 0E                       ldi     (BUFFER)/256
(1)   73/     37B : BE                          phi     RE
(1)   73/     37C : F8 00                       ldi     (BUFFER)&255
(1)   73/     37E : AE                          plo     RE
(1)   74/     37F : EE                  	sex 	re
(1)   75/     380 :                     __RepaintCopy:
(1)   76/     380 : 72                  	ldxa
(1)   77/     381 : 5F                  	str 	rf
(1)   78/     382 : 1F                  	inc 	rf
(1)   79/     383 : 72                  	ldxa
(1)   80/     384 : 5F                  	str 	rf
(1)   81/     385 : 1F                  	inc 	rf
(1)   82/     386 : 8F                  	glo 	rf
(1)   83/     387 : 3A 80               	bnz 	__RepaintCopy	
(1)   84/     389 :                     __RepaintNoCopy:
(1)   85/     389 : (MACRO)             	return
(1)   85/     389 : E2                          sex     r2
(1)   85/     38A : 12                          inc     r2
(1)   85/     38B : 70                          ret
(1)   86/     38C :                     
(1)   87/     38C :                     
(1)   88/     38C :                     
(1)   89/     38C :                     
      82/     38C :                     	include sprites.asm 														; sprite drawing ($30)
(1)    1/     38C :                     ; ************************************************************************************************************
(1)    2/     38C :                     ; ************************************************************************************************************
(1)    3/     38C :                     ;
(1)    4/     38C :                     ;												Draw sprite graphic D
(1)    5/     38C :                     ;
(1)    6/     38C :                     ;	Uses RE,RF
(1)    7/     38C :                     ; ************************************************************************************************************
(1)    8/     38C :                     ; ************************************************************************************************************
(1)    9/     38C :                     
(1)   10/     38C :                     DrawSpriteGraphic:
(1)   11/     38C : 22                  	dec		r2 																	; save at R2
(1)   12/     38D : 52                  	str 	r2
(1)   13/     38E : FE                  	shl 																		; double the sprite number
(1)   14/     38F : FC 94               	adi 	SpriteData & 255 													; add to sprite address, put in RF
(1)   15/     391 : AF                  	plo 	rf
(1)   16/     392 : F8 0A               	ldi 	SpriteData / 256
(1)   17/     394 : 7C 00               	adci 	0
(1)   18/     396 : BF                  	phi 	rf
(1)   19/     397 : 4F                  	lda 	rf 																	; read address into RE.
(1)   20/     398 : BE                  	phi 	re
(1)   21/     399 : 4F                  	lda 	rf
(1)   22/     39A : AE                  	plo 	re 
(1)   23/     39B :                     
 AS V1.42 Beta [Bld 102] - source file game.asm(sprites.asm) - page 16 - 7/2/2016 15:13:14


(1)   24/     39B : 4E                  	lda 	re 																	; read the start drawing address
(1)   25/     39C : AF                  	plo 	rf 																	; put into RF.
(1)   26/     39D : F8 0E               	ldi 	buffer/256 															; make into screen address
(1)   27/     39F : BF                  	phi 	rf
(1)   28/     3A0 : EE                  	sex 	re 																	; RX is data
(1)   29/     3A1 :                     
(1)   30/     3A1 :                     __DSGLoop:
(1)   31/     3A1 : 0E                  	ldn 	re 																	; read mask.
(1)   32/     3A2 : FB FF               	xri 	0FFh 																; if $FF then finished
(1)   33/     3A4 : 32 B2               	bz 		__DSGFinished
(1)   34/     3A6 : 0F                  	ldn 	rf 																	; read screen
(1)   35/     3A7 : F2                  	and 																		; and with mask
(1)   36/     3A8 : 1E                  	inc 	re
(1)   37/     3A9 : F1                  	or 																			; or with data
(1)   38/     3AA : 5F                  	str 	rf 																	; write out.
(1)   39/     3AB : 1E                  	inc 	re 																	; next down
(1)   40/     3AC : 8F                  	glo 	rf 																	 
(1)   41/     3AD : FC 08               	adi 	8
(1)   42/     3AF : AF                  	plo 	rf
(1)   43/     3B0 : 30 A1               	br 		__DSGLoop
(1)   44/     3B2 :                     
(1)   45/     3B2 :                     __DSGFinished:
(1)   46/     3B2 : 42                  	lda 	r2
(1)   47/     3B3 : FC 01               	adi 	1
(1)   48/     3B5 : (MACRO)             	return
(1)   48/     3B5 : E2                          sex     r2
(1)   48/     3B6 : 12                          inc     r2
(1)   48/     3B7 : 70                          ret
(1)   49/     3B8 :                     
(1)   50/     3B8 :                     
(1)   51/     3B8 : 30 8C               	br 		DrawSpriteGraphic
      83/     3BA :                     	include interrupt.asm														; screen driver ($1E)
(1)    1/     3BA :                     ; ************************************************************************************************************
(1)    2/     3BA :                     ; ************************************************************************************************************
(1)    3/     3BA :                     ;
(1)    4/     3BA :                     ;											1861 Display Routine
(1)    5/     3BA :                     ;
(1)    6/     3BA :                     ; ************************************************************************************************************
(1)    7/     3BA :                     ; ************************************************************************************************************
(1)    8/     3BA :                     
(1)    9/     3BA :                     Return:
(1)   10/     3BA : 72                  	ldxa 																		; restore DF
(1)   11/     3BB : FE                  	shl 
(1)   12/     3BC : 72                  	ldxa 																		; restore D
(1)   13/     3BD : 70                  	ret 																		; restore X,P
(1)   14/     3BE :                     Interrupt:
(1)   15/     3BE : 22                  	dec 	r2 																	; [2/2] save return XP on stack 
(1)   16/     3BF : 78                  	sav 																		; [2/4]
(1)   17/     3C0 : 22                  	dec 	r2 																	; [2/6] save D on stack
(1)   18/     3C1 : 52                  	str 	r2																	; [2/8]
(1)   19/     3C2 : F8 0F               	ldi 	screen/256 															; [2/10] set up R0.1
(1)   20/     3C4 : B0                  	phi 	r0 																	; [2/12]
(1)   21/     3C5 : F8 00               	ldi 	0 																	; [2/14] set up R0.0
(1)   22/     3C7 : A0                  	plo 	r0
(1)   23/     3C8 : C4                  	nop 																		; pad out cycles till rendering
(1)   24/     3C9 : C4                  	nop
(1)   25/     3CA : C4                  	nop
(1)   26/     3CB :                     Refresh:
(1)   27/     3CB : 80                  	glo 	r0 																	; do four scan lines for each row
(1)   28/     3CC : E2                  	sex 	r2
 AS V1.42 Beta [Bld 102] - source file game.asm(interrupt.asm) - page 17 - 7/2/2016 15:13:14


(1)   29/     3CD :                     
(1)   30/     3CD : E2                  	sex 	r2
(1)   31/     3CE : 20                  	dec 	r0
(1)   32/     3CF : A0                  	plo 	r0
(1)   33/     3D0 :                     
(1)   34/     3D0 : E2                  	sex 	r2
(1)   35/     3D1 : 20                  	dec 	r0
(1)   36/     3D2 : A0                  	plo 	r0
(1)   37/     3D3 :                     
(1)   38/     3D3 : E2                  	sex 	r2
(1)   39/     3D4 : 20                  	dec 	r0
(1)   40/     3D5 : A0                  	plo 	r0
(1)   41/     3D6 :                     
(1)   42/     3D6 : 3C CB               	bn1 	Refresh 															; in emulator we never loop back
(1)   43/     3D8 :                     
(1)   44/     3D8 : 22                  	dec 	r2 																	; save DF.
(1)   45/     3D9 : 76                  	shrc 	
(1)   46/     3DA : 52                  	str 	r2
(1)   47/     3DB :                     
(1)   48/     3DB : (MACRO)             	lri 	r0,timers 															; point R0 to the timers.
(1)   48/     3DB : F8 0C                       ldi     (TIMERS)/256
(1)   48/     3DD : B0                          phi     R0
(1)   48/     3DE : F8 FC                       ldi     (TIMERS)&255
(1)   48/     3E0 : A0                          plo     R0
(1)   49/     3E1 :                     __IRQTimerLoop:
(1)   50/     3E1 : 40                  	lda 	r0 																	; read timer value and advance
(1)   51/     3E2 : 32 E9               	bz 		__IRQNextTimer	 													; if zero do next ?
(1)   52/     3E4 : 20                  	dec 	r0 																	; if not, decrement the counter.
(1)   53/     3E5 : FF 01               	smi 	1
(1)   54/     3E7 : 50                  	str 	r0
(1)   55/     3E8 : 10                  	inc 	r0
(1)   56/     3E9 :                     __IRQNextTimer:
(1)   57/     3E9 : 80                  	glo 	r0 																	; do all the tiners
(1)   58/     3EA : 3A E1               	bnz 	__IRQTimerLoop
(1)   59/     3EC : 30 BA               	br 		Return
(1)   60/     3EE :                     
      84/     3EE :                     ;
      85/     3EE :                     ; 	Block 3 
      86/     3EE :                     ;
      87/     400 :                     	org 	code+300h
      88/     400 :                     	include move.asm
(1)    1/     400 :                     ; ************************************************************************************************************
(1)    2/     400 :                     ; ************************************************************************************************************
(1)    3/     400 :                     ;
(1)    4/     400 :                     ;											Movement code
(1)    5/     400 :                     ;
(1)    6/     400 :                     ; ************************************************************************************************************
(1)    7/     400 :                     ; ************************************************************************************************************
(1)    8/     400 :                     
(1)    9/     400 : =14H                MOVE_TurnTime = 20 																; frames per turn
(1)   10/     400 : =14H                MOVE_MoveTime = 20 																; frames per move
(1)   11/     400 : =B4H                MOVE_FireTime = 180 															; frames between firing
(1)   12/     400 :                     
(1)   13/     400 :                     MovePlayer:
(1)   14/     400 : (MACRO)             	lri 	rd,moveTimer 														; point RD to move timer
(1)   14/     400 : F8 0C                       ldi     (MOVETIMER)/256
(1)   14/     402 : BD                          phi     RD
(1)   14/     403 : F8 FC                       ldi     (MOVETIMER)&255
(1)   14/     405 : AD                          plo     RD
(1)   15/     406 : (MACRO)             	lri 	rc,direction 														; point RC to direction.
 AS V1.42 Beta [Bld 102] - source file game.asm(move.asm) - page 18 - 7/2/2016 15:13:14


(1)   15/     406 : F8 0C                       ldi     (DIRECTION)/256
(1)   15/     408 : BC                          phi     RC
(1)   15/     409 : F8 F2                       ldi     (DIRECTION)&255
(1)   15/     40B : AC                          plo     RC
(1)   16/     40C : (MACRO)             	call 	r5,ScanKeyboard 													; read keyboard.
(1)   16/     40C :  (MACRO-2)                  lri     R5,SCANKEYBOARD
(1)   16/     40C : F8 0A                       ldi     (SCANKEYBOARD)/256
(1)   16/     40E : B5                          phi     R5
(1)   16/     40F : F8 80                       ldi     (SCANKEYBOARD)&255
(1)   16/     411 : A5                          plo     R5
(1)   16/     412 :  (MACRO-2)                  recall  R5
(1)   16/     412 : 79                          mark
(1)   16/     413 : D5                          sep     R5
(1)   16/     414 : 22                          dec     r2
(1)   17/     415 : AB                  	plo 	rb 																	; save in RB.0
(1)   18/     416 :                     
(1)   19/     416 : 0D                  	ldn 	rd 																	; read move timer.
(1)   20/     417 : 3A 4A               	bnz 	__MPTimer1 															; if non-zero we can't move
(1)   21/     419 :                     
(1)   22/     419 : 8B                  	glo 	rb 																	; get key press.
(1)   23/     41A : FB 0A               	xri 	KEY_Left 															; if left, go to TURN with zero.
(1)   24/     41C : 32 24               	bz 		__MPTurn
(1)   25/     41E : FB 07               	xri 	KEY_Left ! KEY_Right 												; if not right, go to try MOVE
(1)   26/     420 : 3A 2E               	bnz 	__MPTryMove
(1)   27/     422 : F8 02               	ldi 	2 																	; go into TURN with 2
(1)   28/     424 :                     __MPTurn:
(1)   29/     424 : FF 01               	smi 	1 																	; make offset -1 and 1
(1)   30/     426 : EC                  	sex 	rc 																	; add to direction 
(1)   31/     427 : F4                  	add 
(1)   32/     428 : 5C                  	str 	rc 																	; write direction back.
(1)   33/     429 : F8 14               	ldi 	MOVE_TurnTime 														; reset the timer
(1)   34/     42B : 5D                  	str 	rd 
(1)   35/     42C : 30 2E               	br 		__MPTryMove
(1)   36/     42E :                     
(1)   37/     42E :                     __MPTryMove:
(1)   38/     42E : 8B                  	glo 	rb 																	; get key press
(1)   39/     42F : FB 00               	xri 	Key_Forward 														; check forward.
(1)   40/     431 : 3A 4A               	bnz 	__MPTimer1
(1)   41/     433 :                     
(1)   42/     433 : F8 14               	ldi 	MOVE_MoveTime 														; reset the timer
(1)   43/     435 : 5D                  	str 	rd 
(1)   44/     436 : (MACRO)             	lri 	rc,ppvector+1 														; get the next position forward
(1)   44/     436 : F8 0C                       ldi     (PPVECTOR+1)/256
(1)   44/     438 : BC                          phi     RC
(1)   44/     439 : F8 F5                       ldi     (PPVECTOR+1)&255
(1)   44/     43B : AC                          plo     RC
(1)   45/     43C : 0C                  	ldn 	rc 																	; via RC
(1)   46/     43D : AE                  	plo 	re 																	; save in RE.0
(1)   47/     43E : F8 0D               	ldi 	map/256 															; point RE to that map entry
(1)   48/     440 : BE                  	phi 	re
(1)   49/     441 : 0E                  	ldn 	re 																	; read the map
(1)   50/     442 : FE                  	shl 																		; check bit 7 (wall bit)
(1)   51/     443 : 33 4A               	bdf 	__MPTimer1 															; if a solid wall then can't move.
(1)   52/     445 : F8 F3               	ldi 	(player & 255) 														; make rc point to the position
(1)   53/     447 : AC                  	plo 	rc
(1)   54/     448 : 8E                  	glo 	re 																	; get the new position
(1)   55/     449 : 5C                  	str 	rc 																	; save it.
(1)   56/     44A :                     
(1)   57/     44A :                     __MPTimer1: 																
(1)   58/     44A : 1D                  	inc 	rd 																	; point to 2nd timer, fire timer
 AS V1.42 Beta [Bld 102] - source file game.asm(move.asm) - page 19 - 7/2/2016 15:13:14


(1)   59/     44B : 0D                  	ldn 	rd  																; if that is non zero can't fire.
(1)   60/     44C : 3A 87               	bnz 	__MPExit 									
(1)   61/     44E : 8B                  	glo 	rb 																	; check if fire pressed.
(1)   62/     44F : FB 08               	xri 	Key_Fire
(1)   63/     451 : 3A 87               	bnz 	__MPExit
(1)   64/     453 : F8 B4               	ldi 	MOVE_FireTime 														; reset that timer.
(1)   65/     455 : 5D                  	str 	rd 
(1)   66/     456 :                     ;
(1)   67/     456 :                     ;	Shooting effect
(1)   68/     456 :                     ;
(1)   69/     456 : F8 00               	ldi 	0 																	; use program code as random data
(1)   70/     458 : AF                  	plo 	rf 																	; drawn in the screen centre to
(1)   71/     459 : BF                  	phi 	rf 																	; give a blur effect
(1)   72/     45A :                     __MPEffect1:
(1)   73/     45A : (MACRO)             	lri 	re,Screen+8*8+3 													; middle left
(1)   73/     45A : F8 0F                       ldi     (SCREEN+8*8+3)/256
(1)   73/     45C : BE                          phi     RE
(1)   73/     45D : F8 43                       ldi     (SCREEN+8*8+3)&255
(1)   73/     45F : AE                          plo     RE
(1)   74/     460 :                     __MPEffect2: 
(1)   75/     460 : 4F                  	lda 	rf 																	; copy byte from RF into two bytes
(1)   76/     461 : 5E                  	str 	re
(1)   77/     462 : 1E                  	inc 	re
(1)   78/     463 : 5E                  	str 	re
(1)   79/     464 : 8E                  	glo 	re 																	; next line down
(1)   80/     465 : FC 07               	adi 	7
(1)   81/     467 : AE                  	plo 	re
(1)   82/     468 : FB C3               	xri 	24*8+3 																; reached bottom
(1)   83/     46A : 3A 60               	bnz 	__MPEffect2
(1)   84/     46C : 9F                  	ghi 	rf 																	; if not done whole effect go back.
(1)   85/     46D : FB 04               	xri 	04h
(1)   86/     46F : 3A 5A               	bnz 	__MPEffect1
(1)   87/     471 :                     ;
(1)   88/     471 :                     ;	Look for a princess to kill
(1)   89/     471 :                     ;
(1)   90/     471 : (MACRO)             	lri 	re,ppVector 														; point RE to the player position vector
(1)   90/     471 : F8 0C                       ldi     (PPVECTOR)/256
(1)   90/     473 : BE                          phi     RE
(1)   90/     474 : F8 F4                       ldi     (PPVECTOR)&255
(1)   90/     476 : AE                          plo     RE
(1)   91/     477 : F8 0D               	ldi 	map/256 															; RF is pointer to the map
(1)   92/     479 : BF                  	phi 	rf
(1)   93/     47A :                     __MPFindPrincess:	
(1)   94/     47A : 4E                  	lda 	re 																	; get position + advance
(1)   95/     47B : AF                  	plo 	rf 																	; rf now points into map
(1)   96/     47C : 0F                  	ldn 	rf 																	; read map element
(1)   97/     47D : FE                  	shl 																		; check bit 7 (wall)
(1)   98/     47E : 33 87               	bdf 	__MPExit 															; wall present then exit.	
(1)   99/     480 : 3A 8A               	bnz 	__MPKill 															; if non zero kill princess !
(1)  100/     482 : 8E                  	glo 	re  																; see if done the whole vector
(1)  101/     483 : FB F8               	xri 	(ppVector+4) & 255
(1)  102/     485 : 3A 7A               	bnz 	__MPFindPrincess
(1)  103/     487 :                     __MPExit:
(1)  104/     487 : (MACRO)             	return
(1)  104/     487 : E2                          sex     r2
(1)  104/     488 : 12                          inc     r2
(1)  104/     489 : 70                          ret
(1)  105/     48A :                     ;
(1)  106/     48A :                     ;	Kill princess and bump score
(1)  107/     48A :                     ;
 AS V1.42 Beta [Bld 102] - source file game.asm(move.asm) - page 20 - 7/2/2016 15:13:14


(1)  108/     48A :                     __MPKill:
(1)  109/     48A : F8 00               	ldi 	00 																	; write zero to princess position
(1)  110/     48C : 5F                  	str 	rf
(1)  111/     48D : F8 F0               	ldi 	kills01 & 255 														; point RE to kill count
(1)  112/     48F : AE                  	plo 	re
(1)  113/     490 : 0E                  	ldn 	re 		 															; bump score
(1)  114/     491 : FC 01               	adi 	1
(1)  115/     493 : 5E                  	str 	re
(1)  116/     494 : FB 0A               	xri 	10 																	; exit if not 10 yet.
(1)  117/     496 : 3A 87               	bnz 	__MPExit
(1)  118/     498 : 5E                  	str 	re 																	; zero ones
(1)  119/     499 : 1E                  	inc 	re 																	; point to tens
(1)  120/     49A : 0E                  	ldn 	re 																	; bump 10s
(1)  121/     49B : FC 01               	adi 	1
(1)  122/     49D : 5E                  	str 	re
(1)  123/     49E : FB 0A               	xri 	10 																	; reached 99....
(1)  124/     4A0 : 3A 87               	bnz 	__MPexit
(1)  125/     4A2 : 5E                  	str 	re 																	; zero tens, wraps around :)
(1)  126/     4A3 : 30 87               	br 		__MPexit
(1)  127/     4A5 :                     
      89/     4A5 :                     
      90/     A80 :                     	org  	0A80h 																; put gfx data at the end.	
      91/     A80 :                     	include keyboard.asm  														; keyboard driver here so can port.
(1)    1/     A80 :                     ; ************************************************************************************************************
(1)    2/     A80 :                     ; ************************************************************************************************************
(1)    3/     A80 :                     ;
(1)    4/     A80 :                     ;						Keyboard Scanner - returns Key_xxxx other values are ignored
(1)    5/     A80 :                     ;
(1)    6/     A80 :                     ;	Uses RE,RF
(1)    7/     A80 :                     ; ************************************************************************************************************
(1)    8/     A80 :                     ; ************************************************************************************************************
(1)    9/     A80 :                     
(1)   10/     A80 : =0H                 Key_Forward = 0 																; keyboard allocation 
(1)   11/     A80 : =AH                 Key_Left = 0Ah 																	; these keys are chosen for a PC
(1)   12/     A80 : =DH                 Key_Right = 0Dh 																; keyboard emulation not a VIP
(1)   13/     A80 : =8H                 Key_Fire = 8  																	; which would use 2,4,6,F (maybe)
(1)   14/     A80 :                     
(1)   15/     A80 :                     ScanKeyboard:
(1)   16/     A80 : E2                  	sex 	r2 																	; use R2 as index
(1)   17/     A81 : F8 0F               	ldi 	15 																	; start scanning from key 'F'
(1)   18/     A83 : AF                  	plo 	rf
(1)   19/     A84 :                     __SKLoop:
(1)   20/     A84 : 8F                  	glo 	rf  																; write current value to keypad latch.
(1)   21/     A85 : 22                  	dec 	r2 															
(1)   22/     A86 : 52                  	str 	r2
(1)   23/     A87 : 62                  	out 	2
(1)   24/     A88 :                     
(1)   25/     A88 : C4                  	nop 																		; debounce time	 
(1)   26/     A89 : C4                  	nop
(1)   27/     A8A : 36 90               	b3 		__SKExit
(1)   28/     A8C : 8F                  	glo 	rf 																	; get current checked
(1)   29/     A8D : 2F                  	dec 	rf 																	; do next
(1)   30/     A8E : 3A 84               	bnz 	__SKLoop 															; back round if not just checked $0
(1)   31/     A90 :                     __SKExit:
(1)   32/     A90 : 8F                  	glo 	rf 																	; return value in RF.
(1)   33/     A91 : (MACRO)             	return
(1)   33/     A91 : E2                          sex     r2
(1)   33/     A92 : 12                          inc     r2
(1)   33/     A93 : 70                          ret
(1)   34/     A94 :                     
 AS V1.42 Beta [Bld 102] - source file game.asm(keyboard.asm) - page 21 - 7/2/2016 15:13:14


(1)   35/     A94 :                     
      92/     A94 :                     SpriteData:	
      93/     A94 :                     	include graphics.inc 														; all the graphic data
(1)    1/     A94 : 0A B4                   dw __graphic00
(1)    2/     A96 : 0A E6                   dw __graphic01
(1)    3/     A98 : 0B 18                   dw __graphic02
(1)    4/     A9A : 0B 3E                   dw __graphic03
(1)    5/     A9C : 0B 64                   dw __graphic04
(1)    6/     A9E : 0B 82                   dw __graphic05
(1)    7/     AA0 : 0B A0                   dw __graphic06
(1)    8/     AA2 : 0B B6                   dw __graphic07
(1)    9/     AA4 : 0B CC                   dw __graphic08
(1)   10/     AA6 : 0B E2                   dw __graphic09
(1)   11/     AA8 : 0B F8                   dw __graphic10
(1)   12/     AAA : 0C 0A                   dw __graphic11
(1)   13/     AAC : 0C 1C                   dw __graphic12
(1)   14/     AAE : 0C 2A                   dw __graphic13
(1)   15/     AB0 : 0C 38                   dw __graphic14
(1)   16/     AB2 : 0C 42                   dw __graphic15
(1)   17/     AB4 :                     ;        ..X XXX 
(1)   18/     AB4 :                     ;        .. X X  
(1)   19/     AB4 :                     ;        ..X XXX 
(1)   20/     AB4 :                     ;        ..X     
(1)   21/     AB4 :                     ;        ..X XXXX
(1)   22/     AB4 :                     ;        ..X XXXX
(1)   23/     AB4 :                     ;        ...X XXX
(1)   24/     AB4 :                     ;        ...XX   
(1)   25/     AB4 :                     ;        ..X     
(1)   26/     AB4 :                     ;        .X X    
(1)   27/     AB4 :                     ;        X XX    
(1)   28/     AB4 :                     ;        X XXX   
(1)   29/     AB4 :                     ;        X XXXX  
(1)   30/     AB4 :                     ;        X XXXXX 
(1)   31/     AB4 :                     ;        .X  XXXX
(1)   32/     AB4 :                     ;        ..X XXXX
(1)   33/     AB4 :                     ;        ..X XXXX
(1)   34/     AB4 :                     ;        ..X XXXX
(1)   35/     AB4 :                     ;        ..X XXXX
(1)   36/     AB4 :                     ;        ..X XXXX
(1)   37/     AB4 :                     ;        ..X XXXX
(1)   38/     AB4 :                     ;        ..X XXXX
(1)   39/     AB4 :                     ;        ...X    
(1)   40/     AB4 :                     ;        ....XXXX
(1)   41/     AB4 :                     __graphic00:
(1)   42/     AB4 : 4B                      db 04bh
(1)   43/     AB5 : C0                      db 0c0h
(1)   44/     AB6 : 11                      db 011h
(1)   45/     AB7 : C0                      db 0c0h
(1)   46/     AB8 : 2B                      db 02bh
(1)   47/     AB9 : C0                      db 0c0h
(1)   48/     ABA : 11                      db 011h
(1)   49/     ABB : C0                      db 0c0h
(1)   50/     ABC : 1F                      db 01fh
(1)   51/     ABD : C0                      db 0c0h
(1)   52/     ABE : 10                      db 010h
(1)   53/     ABF : C0                      db 0c0h
(1)   54/     AC0 : 10                      db 010h
(1)   55/     AC1 : E0                      db 0e0h
(1)   56/     AC2 : 08                      db 008h
(1)   57/     AC3 : E0                      db 0e0h
 AS V1.42 Beta [Bld 102] - source file game.asm(graphics.inc) - page 22 - 7/2/2016 15:13:14


(1)   58/     AC4 : 07                      db 007h
(1)   59/     AC5 : C0                      db 0c0h
(1)   60/     AC6 : 1F                      db 01fh
(1)   61/     AC7 : 80                      db 080h
(1)   62/     AC8 : 2F                      db 02fh
(1)   63/     AC9 : 00                      db 000h
(1)   64/     ACA : 4F                      db 04fh
(1)   65/     ACB : 00                      db 000h
(1)   66/     ACC : 47                      db 047h
(1)   67/     ACD : 00                      db 000h
(1)   68/     ACE : 43                      db 043h
(1)   69/     ACF : 00                      db 000h
(1)   70/     AD0 : 41                      db 041h
(1)   71/     AD1 : 80                      db 080h
(1)   72/     AD2 : 30                      db 030h
(1)   73/     AD3 : C0                      db 0c0h
(1)   74/     AD4 : 10                      db 010h
(1)   75/     AD5 : C0                      db 0c0h
(1)   76/     AD6 : 10                      db 010h
(1)   77/     AD7 : C0                      db 0c0h
(1)   78/     AD8 : 10                      db 010h
(1)   79/     AD9 : C0                      db 0c0h
(1)   80/     ADA : 10                      db 010h
(1)   81/     ADB : C0                      db 0c0h
(1)   82/     ADC : 10                      db 010h
(1)   83/     ADD : C0                      db 0c0h
(1)   84/     ADE : 10                      db 010h
(1)   85/     ADF : C0                      db 0c0h
(1)   86/     AE0 : 10                      db 010h
(1)   87/     AE1 : E0                      db 0e0h
(1)   88/     AE2 : 0F                      db 00fh
(1)   89/     AE3 : F0                      db 0f0h
(1)   90/     AE4 : 00                      db 000h
(1)   91/     AE5 : FF                      db 0ffh
(1)   92/     AE6 :                     __graphic01:
(1)   93/     AE6 : 4C                      db 04ch
(1)   94/     AE7 : 03                      db 003h
(1)   95/     AE8 : 88                      db 088h
(1)   96/     AE9 : 03                      db 003h
(1)   97/     AEA : D4                      db 0d4h
(1)   98/     AEB : 03                      db 003h
(1)   99/     AEC : 88                      db 088h
(1)  100/     AED : 03                      db 003h
(1)  101/     AEE : F8                      db 0f8h
(1)  102/     AEF : 03                      db 003h
(1)  103/     AF0 : 08                      db 008h
(1)  104/     AF1 : 03                      db 003h
(1)  105/     AF2 : 08                      db 008h
(1)  106/     AF3 : 07                      db 007h
(1)  107/     AF4 : 10                      db 010h
(1)  108/     AF5 : 07                      db 007h
(1)  109/     AF6 : E0                      db 0e0h
(1)  110/     AF7 : 03                      db 003h
(1)  111/     AF8 : F8                      db 0f8h
(1)  112/     AF9 : 01                      db 001h
(1)  113/     AFA : F4                      db 0f4h
(1)  114/     AFB : 00                      db 000h
(1)  115/     AFC : F2                      db 0f2h
(1)  116/     AFD : 00                      db 000h
(1)  117/     AFE : E2                      db 0e2h
 AS V1.42 Beta [Bld 102] - source file game.asm(graphics.inc) - page 23 - 7/2/2016 15:13:14


(1)  118/     AFF : 00                      db 000h
(1)  119/     B00 : C2                      db 0c2h
(1)  120/     B01 : 00                      db 000h
(1)  121/     B02 : 82                      db 082h
(1)  122/     B03 : 01                      db 001h
(1)  123/     B04 : 0C                      db 00ch
(1)  124/     B05 : 03                      db 003h
(1)  125/     B06 : 08                      db 008h
(1)  126/     B07 : 03                      db 003h
(1)  127/     B08 : 08                      db 008h
(1)  128/     B09 : 03                      db 003h
(1)  129/     B0A : 08                      db 008h
(1)  130/     B0B : 03                      db 003h
(1)  131/     B0C : 08                      db 008h
(1)  132/     B0D : 03                      db 003h
(1)  133/     B0E : 08                      db 008h
(1)  134/     B0F : 03                      db 003h
(1)  135/     B10 : 08                      db 008h
(1)  136/     B11 : 03                      db 003h
(1)  137/     B12 : 08                      db 008h
(1)  138/     B13 : 07                      db 007h
(1)  139/     B14 : F0                      db 0f0h
(1)  140/     B15 : 0F                      db 00fh
(1)  141/     B16 : 00                      db 000h
(1)  142/     B17 : FF                      db 0ffh
(1)  143/     B18 :                     ;        ....X..X
(1)  144/     B18 :                     ;        ...X XX 
(1)  145/     B18 :                     ;        ....    
(1)  146/     B18 :                     ;        .... XXX
(1)  147/     B18 :                     ;        ....X XX
(1)  148/     B18 :                     ;        ....XX  
(1)  149/     B18 :                     ;        ..XX    
(1)  150/     B18 :                     ;        ..X X   
(1)  151/     B18 :                     ;        .. XXX  
(1)  152/     B18 :                     ;        .. XXXX 
(1)  153/     B18 :                     ;        ..X  XXX
(1)  154/     B18 :                     ;        ...X XXX
(1)  155/     B18 :                     ;        ...X XXX
(1)  156/     B18 :                     ;        ...X XXX
(1)  157/     B18 :                     ;        ...X XXX
(1)  158/     B18 :                     ;        ...X XXX
(1)  159/     B18 :                     ;        ....X   
(1)  160/     B18 :                     ;        .....XXX
(1)  161/     B18 :                     __graphic02:
(1)  162/     B18 : 53                      db 053h
(1)  163/     B19 : F6                      db 0f6h
(1)  164/     B1A : 00                      db 000h
(1)  165/     B1B : E0                      db 0e0h
(1)  166/     B1C : 09                      db 009h
(1)  167/     B1D : F0                      db 0f0h
(1)  168/     B1E : 0F                      db 00fh
(1)  169/     B1F : F0                      db 0f0h
(1)  170/     B20 : 08                      db 008h
(1)  171/     B21 : F0                      db 0f0h
(1)  172/     B22 : 04                      db 004h
(1)  173/     B23 : F0                      db 0f0h
(1)  174/     B24 : 03                      db 003h
(1)  175/     B25 : C0                      db 0c0h
(1)  176/     B26 : 0F                      db 00fh
(1)  177/     B27 : C0                      db 0c0h
 AS V1.42 Beta [Bld 102] - source file game.asm(graphics.inc) - page 24 - 7/2/2016 15:13:14


(1)  178/     B28 : 17                      db 017h
(1)  179/     B29 : C0                      db 0c0h
(1)  180/     B2A : 23                      db 023h
(1)  181/     B2B : C0                      db 0c0h
(1)  182/     B2C : 21                      db 021h
(1)  183/     B2D : C0                      db 0c0h
(1)  184/     B2E : 18                      db 018h
(1)  185/     B2F : E0                      db 0e0h
(1)  186/     B30 : 08                      db 008h
(1)  187/     B31 : E0                      db 0e0h
(1)  188/     B32 : 08                      db 008h
(1)  189/     B33 : E0                      db 0e0h
(1)  190/     B34 : 08                      db 008h
(1)  191/     B35 : E0                      db 0e0h
(1)  192/     B36 : 08                      db 008h
(1)  193/     B37 : E0                      db 0e0h
(1)  194/     B38 : 08                      db 008h
(1)  195/     B39 : F0                      db 0f0h
(1)  196/     B3A : 07                      db 007h
(1)  197/     B3B : F8                      db 0f8h
(1)  198/     B3C : 00                      db 000h
(1)  199/     B3D : FF                      db 0ffh
(1)  200/     B3E :                     __graphic03:
(1)  201/     B3E : 54                      db 054h
(1)  202/     B3F : 6F                      db 06fh
(1)  203/     B40 : 00                      db 000h
(1)  204/     B41 : 07                      db 007h
(1)  205/     B42 : 90                      db 090h
(1)  206/     B43 : 0F                      db 00fh
(1)  207/     B44 : F0                      db 0f0h
(1)  208/     B45 : 0F                      db 00fh
(1)  209/     B46 : 10                      db 010h
(1)  210/     B47 : 0F                      db 00fh
(1)  211/     B48 : 20                      db 020h
(1)  212/     B49 : 0F                      db 00fh
(1)  213/     B4A : C0                      db 0c0h
(1)  214/     B4B : 03                      db 003h
(1)  215/     B4C : F0                      db 0f0h
(1)  216/     B4D : 03                      db 003h
(1)  217/     B4E : E8                      db 0e8h
(1)  218/     B4F : 03                      db 003h
(1)  219/     B50 : C4                      db 0c4h
(1)  220/     B51 : 03                      db 003h
(1)  221/     B52 : 84                      db 084h
(1)  222/     B53 : 03                      db 003h
(1)  223/     B54 : 18                      db 018h
(1)  224/     B55 : 07                      db 007h
(1)  225/     B56 : 10                      db 010h
(1)  226/     B57 : 07                      db 007h
(1)  227/     B58 : 10                      db 010h
(1)  228/     B59 : 07                      db 007h
(1)  229/     B5A : 10                      db 010h
(1)  230/     B5B : 07                      db 007h
(1)  231/     B5C : 10                      db 010h
(1)  232/     B5D : 07                      db 007h
(1)  233/     B5E : 10                      db 010h
(1)  234/     B5F : 0F                      db 00fh
(1)  235/     B60 : E0                      db 0e0h
(1)  236/     B61 : 1F                      db 01fh
(1)  237/     B62 : 00                      db 000h
 AS V1.42 Beta [Bld 102] - source file game.asm(graphics.inc) - page 25 - 7/2/2016 15:13:14


(1)  238/     B63 : FF                      db 0ffh
(1)  239/     B64 :                     ;        ...X XX 
(1)  240/     B64 :                     ;        ...X    
(1)  241/     B64 :                     ;        ...X XXX
(1)  242/     B64 :                     ;        ....X XX
(1)  243/     B64 :                     ;        ...X    
(1)  244/     B64 :                     ;        ..X XX  
(1)  245/     B64 :                     ;        ..X XXX 
(1)  246/     B64 :                     ;        ..X  XXX
(1)  247/     B64 :                     ;        ...X XXX
(1)  248/     B64 :                     ;        ...X XXX
(1)  249/     B64 :                     ;        ...X XXX
(1)  250/     B64 :                     ;        ...X XXX
(1)  251/     B64 :                     ;        ....X   
(1)  252/     B64 :                     ;        .....XXX
(1)  253/     B64 :                     __graphic04:
(1)  254/     B64 : 53                      db 053h
(1)  255/     B65 : E0                      db 0e0h
(1)  256/     B66 : 09                      db 009h
(1)  257/     B67 : E0                      db 0e0h
(1)  258/     B68 : 0F                      db 00fh
(1)  259/     B69 : E0                      db 0e0h
(1)  260/     B6A : 08                      db 008h
(1)  261/     B6B : F0                      db 0f0h
(1)  262/     B6C : 04                      db 004h
(1)  263/     B6D : E0                      db 0e0h
(1)  264/     B6E : 0F                      db 00fh
(1)  265/     B6F : C0                      db 0c0h
(1)  266/     B70 : 13                      db 013h
(1)  267/     B71 : C0                      db 0c0h
(1)  268/     B72 : 11                      db 011h
(1)  269/     B73 : C0                      db 0c0h
(1)  270/     B74 : 18                      db 018h
(1)  271/     B75 : E0                      db 0e0h
(1)  272/     B76 : 08                      db 008h
(1)  273/     B77 : E0                      db 0e0h
(1)  274/     B78 : 08                      db 008h
(1)  275/     B79 : E0                      db 0e0h
(1)  276/     B7A : 08                      db 008h
(1)  277/     B7B : E0                      db 0e0h
(1)  278/     B7C : 08                      db 008h
(1)  279/     B7D : F0                      db 0f0h
(1)  280/     B7E : 07                      db 007h
(1)  281/     B7F : F8                      db 0f8h
(1)  282/     B80 : 00                      db 000h
(1)  283/     B81 : FF                      db 0ffh
(1)  284/     B82 :                     __graphic05:
(1)  285/     B82 : 54                      db 054h
(1)  286/     B83 : 07                      db 007h
(1)  287/     B84 : 90                      db 090h
(1)  288/     B85 : 07                      db 007h
(1)  289/     B86 : F0                      db 0f0h
(1)  290/     B87 : 07                      db 007h
(1)  291/     B88 : 10                      db 010h
(1)  292/     B89 : 0F                      db 00fh
(1)  293/     B8A : 20                      db 020h
(1)  294/     B8B : 07                      db 007h
(1)  295/     B8C : F0                      db 0f0h
(1)  296/     B8D : 03                      db 003h
(1)  297/     B8E : C8                      db 0c8h
 AS V1.42 Beta [Bld 102] - source file game.asm(graphics.inc) - page 26 - 7/2/2016 15:13:14


(1)  298/     B8F : 03                      db 003h
(1)  299/     B90 : 88                      db 088h
(1)  300/     B91 : 03                      db 003h
(1)  301/     B92 : 18                      db 018h
(1)  302/     B93 : 07                      db 007h
(1)  303/     B94 : 10                      db 010h
(1)  304/     B95 : 07                      db 007h
(1)  305/     B96 : 10                      db 010h
(1)  306/     B97 : 07                      db 007h
(1)  307/     B98 : 10                      db 010h
(1)  308/     B99 : 07                      db 007h
(1)  309/     B9A : 10                      db 010h
(1)  310/     B9B : 0F                      db 00fh
(1)  311/     B9C : E0                      db 0e0h
(1)  312/     B9D : 1F                      db 01fh
(1)  313/     B9E : 00                      db 000h
(1)  314/     B9F : FF                      db 0ffh
(1)  315/     BA0 :                     ;        ....X X 
(1)  316/     BA0 :                     ;        ....X   
(1)  317/     BA0 :                     ;        ....X XX
(1)  318/     BA0 :                     ;        .....X X
(1)  319/     BA0 :                     ;        .....X  
(1)  320/     BA0 :                     ;        ....X X 
(1)  321/     BA0 :                     ;        ....X XX
(1)  322/     BA0 :                     ;        ....X XX
(1)  323/     BA0 :                     ;        .....X  
(1)  324/     BA0 :                     ;        ......XX
(1)  325/     BA0 :                     __graphic06:
(1)  326/     BA0 : 53                      db 053h
(1)  327/     BA1 : F0                      db 0f0h
(1)  328/     BA2 : 05                      db 005h
(1)  329/     BA3 : F0                      db 0f0h
(1)  330/     BA4 : 07                      db 007h
(1)  331/     BA5 : F0                      db 0f0h
(1)  332/     BA6 : 04                      db 004h
(1)  333/     BA7 : F8                      db 0f8h
(1)  334/     BA8 : 02                      db 002h
(1)  335/     BA9 : F8                      db 0f8h
(1)  336/     BAA : 03                      db 003h
(1)  337/     BAB : F0                      db 0f0h
(1)  338/     BAC : 05                      db 005h
(1)  339/     BAD : F0                      db 0f0h
(1)  340/     BAE : 04                      db 004h
(1)  341/     BAF : F0                      db 0f0h
(1)  342/     BB0 : 04                      db 004h
(1)  343/     BB1 : F8                      db 0f8h
(1)  344/     BB2 : 03                      db 003h
(1)  345/     BB3 : FC                      db 0fch
(1)  346/     BB4 : 00                      db 000h
(1)  347/     BB5 : FF                      db 0ffh
(1)  348/     BB6 :                     __graphic07:
(1)  349/     BB6 : 54                      db 054h
(1)  350/     BB7 : 0F                      db 00fh
(1)  351/     BB8 : A0                      db 0a0h
(1)  352/     BB9 : 0F                      db 00fh
(1)  353/     BBA : E0                      db 0e0h
(1)  354/     BBB : 0F                      db 00fh
(1)  355/     BBC : 20                      db 020h
(1)  356/     BBD : 1F                      db 01fh
(1)  357/     BBE : 40                      db 040h
 AS V1.42 Beta [Bld 102] - source file game.asm(graphics.inc) - page 27 - 7/2/2016 15:13:14


(1)  358/     BBF : 1F                      db 01fh
(1)  359/     BC0 : C0                      db 0c0h
(1)  360/     BC1 : 0F                      db 00fh
(1)  361/     BC2 : A0                      db 0a0h
(1)  362/     BC3 : 0F                      db 00fh
(1)  363/     BC4 : 20                      db 020h
(1)  364/     BC5 : 0F                      db 00fh
(1)  365/     BC6 : 20                      db 020h
(1)  366/     BC7 : 1F                      db 01fh
(1)  367/     BC8 : C0                      db 0c0h
(1)  368/     BC9 : 3F                      db 03fh
(1)  369/     BCA : 00                      db 000h
(1)  370/     BCB : FF                      db 0ffh
(1)  371/     BCC :                     ;        ....XXX.
(1)  372/     BCC :                     ;        ...X   X
(1)  373/     BCC :                     ;        ..X     
(1)  374/     BCC :                     ;        ..X     
(1)  375/     BCC :                     ;        ..X     
(1)  376/     BCC :                     ;        ...X    
(1)  377/     BCC :                     ;        ....X   
(1)  378/     BCC :                     ;        .....X  
(1)  379/     BCC :                     ;        ......X 
(1)  380/     BCC :                     ;        .......X
(1)  381/     BCC :                     __graphic08:
(1)  382/     BCC : 0E                      db 00eh
(1)  383/     BCD : F1                      db 0f1h
(1)  384/     BCE : 00                      db 000h
(1)  385/     BCF : E0                      db 0e0h
(1)  386/     BD0 : 0E                      db 00eh
(1)  387/     BD1 : C0                      db 0c0h
(1)  388/     BD2 : 1F                      db 01fh
(1)  389/     BD3 : C0                      db 0c0h
(1)  390/     BD4 : 1F                      db 01fh
(1)  391/     BD5 : C0                      db 0c0h
(1)  392/     BD6 : 1F                      db 01fh
(1)  393/     BD7 : E0                      db 0e0h
(1)  394/     BD8 : 0F                      db 00fh
(1)  395/     BD9 : F0                      db 0f0h
(1)  396/     BDA : 07                      db 007h
(1)  397/     BDB : F8                      db 0f8h
(1)  398/     BDC : 03                      db 003h
(1)  399/     BDD : FC                      db 0fch
(1)  400/     BDE : 01                      db 001h
(1)  401/     BDF : FE                      db 0feh
(1)  402/     BE0 : 00                      db 000h
(1)  403/     BE1 : FF                      db 0ffh
(1)  404/     BE2 :                     __graphic09:
(1)  405/     BE2 : 0F                      db 00fh
(1)  406/     BE3 : 8F                      db 08fh
(1)  407/     BE4 : 00                      db 000h
(1)  408/     BE5 : 07                      db 007h
(1)  409/     BE6 : 70                      db 070h
(1)  410/     BE7 : 03                      db 003h
(1)  411/     BE8 : F8                      db 0f8h
(1)  412/     BE9 : 03                      db 003h
(1)  413/     BEA : F8                      db 0f8h
(1)  414/     BEB : 03                      db 003h
(1)  415/     BEC : F8                      db 0f8h
(1)  416/     BED : 07                      db 007h
(1)  417/     BEE : F0                      db 0f0h
 AS V1.42 Beta [Bld 102] - source file game.asm(graphics.inc) - page 28 - 7/2/2016 15:13:14


(1)  418/     BEF : 0F                      db 00fh
(1)  419/     BF0 : E0                      db 0e0h
(1)  420/     BF1 : 1F                      db 01fh
(1)  421/     BF2 : C0                      db 0c0h
(1)  422/     BF3 : 3F                      db 03fh
(1)  423/     BF4 : 80                      db 080h
(1)  424/     BF5 : 7F                      db 07fh
(1)  425/     BF6 : 00                      db 000h
(1)  426/     BF7 : FF                      db 0ffh
(1)  427/     BF8 :                     ;        .....XX.
(1)  428/     BF8 :                     ;        ....X  X
(1)  429/     BF8 :                     ;        ...X    
(1)  430/     BF8 :                     ;        ...X    
(1)  431/     BF8 :                     ;        ....X   
(1)  432/     BF8 :                     ;        .....X  
(1)  433/     BF8 :                     ;        ......X 
(1)  434/     BF8 :                     ;        .......X
(1)  435/     BF8 :                     __graphic10:
(1)  436/     BF8 : 0E                      db 00eh
(1)  437/     BF9 : F9                      db 0f9h
(1)  438/     BFA : 00                      db 000h
(1)  439/     BFB : F0                      db 0f0h
(1)  440/     BFC : 06                      db 006h
(1)  441/     BFD : E0                      db 0e0h
(1)  442/     BFE : 0F                      db 00fh
(1)  443/     BFF : E0                      db 0e0h
(1)  444/     C00 : 0F                      db 00fh
(1)  445/     C01 : F0                      db 0f0h
(1)  446/     C02 : 07                      db 007h
(1)  447/     C03 : F8                      db 0f8h
(1)  448/     C04 : 03                      db 003h
(1)  449/     C05 : FC                      db 0fch
(1)  450/     C06 : 01                      db 001h
(1)  451/     C07 : FE                      db 0feh
(1)  452/     C08 : 00                      db 000h
(1)  453/     C09 : FF                      db 0ffh
(1)  454/     C0A :                     __graphic11:
(1)  455/     C0A : 0F                      db 00fh
(1)  456/     C0B : 9F                      db 09fh
(1)  457/     C0C : 00                      db 000h
(1)  458/     C0D : 0F                      db 00fh
(1)  459/     C0E : 60                      db 060h
(1)  460/     C0F : 07                      db 007h
(1)  461/     C10 : F0                      db 0f0h
(1)  462/     C11 : 07                      db 007h
(1)  463/     C12 : F0                      db 0f0h
(1)  464/     C13 : 0F                      db 00fh
(1)  465/     C14 : E0                      db 0e0h
(1)  466/     C15 : 1F                      db 01fh
(1)  467/     C16 : C0                      db 0c0h
(1)  468/     C17 : 3F                      db 03fh
(1)  469/     C18 : 80                      db 080h
(1)  470/     C19 : 7F                      db 07fh
(1)  471/     C1A : 00                      db 000h
(1)  472/     C1B : FF                      db 0ffh
(1)  473/     C1C :                     ;        .....X X
(1)  474/     C1C :                     ;        ....X   
(1)  475/     C1C :                     ;        ....X   
(1)  476/     C1C :                     ;        .....X  
(1)  477/     C1C :                     ;        ......X 
 AS V1.42 Beta [Bld 102] - source file game.asm(graphics.inc) - page 29 - 7/2/2016 15:13:14


(1)  478/     C1C :                     ;        .......X
(1)  479/     C1C :                     __graphic12:
(1)  480/     C1C : 0E                      db 00eh
(1)  481/     C1D : F8                      db 0f8h
(1)  482/     C1E : 02                      db 002h
(1)  483/     C1F : F0                      db 0f0h
(1)  484/     C20 : 07                      db 007h
(1)  485/     C21 : F0                      db 0f0h
(1)  486/     C22 : 07                      db 007h
(1)  487/     C23 : F8                      db 0f8h
(1)  488/     C24 : 03                      db 003h
(1)  489/     C25 : FC                      db 0fch
(1)  490/     C26 : 01                      db 001h
(1)  491/     C27 : FE                      db 0feh
(1)  492/     C28 : 00                      db 000h
(1)  493/     C29 : FF                      db 0ffh
(1)  494/     C2A :                     __graphic13:
(1)  495/     C2A : 0F                      db 00fh
(1)  496/     C2B : 1F                      db 01fh
(1)  497/     C2C : 40                      db 040h
(1)  498/     C2D : 0F                      db 00fh
(1)  499/     C2E : E0                      db 0e0h
(1)  500/     C2F : 0F                      db 00fh
(1)  501/     C30 : E0                      db 0e0h
(1)  502/     C31 : 1F                      db 01fh
(1)  503/     C32 : C0                      db 0c0h
(1)  504/     C33 : 3F                      db 03fh
(1)  505/     C34 : 80                      db 080h
(1)  506/     C35 : 7F                      db 07fh
(1)  507/     C36 : 00                      db 000h
(1)  508/     C37 : FF                      db 0ffh
(1)  509/     C38 :                     ;        ......X.
(1)  510/     C38 :                     ;        .....X X
(1)  511/     C38 :                     ;        ......X 
(1)  512/     C38 :                     ;        .......X
(1)  513/     C38 :                     __graphic14:
(1)  514/     C38 : 0E                      db 00eh
(1)  515/     C39 : FD                      db 0fdh
(1)  516/     C3A : 00                      db 000h
(1)  517/     C3B : F8                      db 0f8h
(1)  518/     C3C : 02                      db 002h
(1)  519/     C3D : FC                      db 0fch
(1)  520/     C3E : 01                      db 001h
(1)  521/     C3F : FE                      db 0feh
(1)  522/     C40 : 00                      db 000h
(1)  523/     C41 : FF                      db 0ffh
(1)  524/     C42 :                     __graphic15:
(1)  525/     C42 : 0F                      db 00fh
(1)  526/     C43 : BF                      db 0bfh
(1)  527/     C44 : 00                      db 000h
(1)  528/     C45 : 1F                      db 01fh
(1)  529/     C46 : 40                      db 040h
(1)  530/     C47 : 3F                      db 03fh
(1)  531/     C48 : 80                      db 080h
(1)  532/     C49 : 7F                      db 07fh
(1)  533/     C4A : 00                      db 000h
(1)  534/     C4B : FF                      db 0ffh
(1)  535/     C4C :                     ; 408
(1)  536/     C4C :                     
      94/     C4C :                     
 AS V1.42 Beta [Bld 102] - source file game.asm - page 30 - 7/2/2016 15:13:14


      95/     C4C :                     ;	TODO: 	
      96/     C4C :                     ;			Shooting Princesses :) 
      97/     C4C :                     ; 			Sort out princess graphics (4 becomes 3, smaller 4)
      98/     C4C :                     ;			(Put fake heart up there)
      99/     C4C :                     ; 			(RELEASE)
     100/     C4C :                     ; 			Add closeness sound effect / heartbeat.
     101/     C4C :                     ;			Princess movement (for arbitrary placed princess)
     102/     C4C :                     ;			Put princesses in the maze and play the game :)
     103/     C4C :                     
 AS V1.42 Beta [Bld 102] - source file game.asm - page 31 - 7/2/2016 15:13:14


  symbol table (* = unused):
  ------------------------

*ARCHITECTURE :  i386-unknown-win32 - | *BIGENDIAN :                      0 - |
*BRANCHEXT :                      0 - |  BUFFER :                       E00 - |
*CASESENSITIVE :                  0 - |  CODE :                         100 C |
*CONSTPI :        3.141592653589793 - |  CREATEMAZE :                   100 C |
*DATE :                    7/2/2016 - |  DIRECTION :                    CF2 - |
 DOOROPEN :                     200 C |  DRAWPLAYERVIEWATDEPTH :        282 C |
 DRAWSPRITEGRAPHIC :            38C C | *FALSE :                          0 - |
*FIRETIMER :                    CFD - | *FULLPMMU :                       1 - |
*GETPLAYERNEXTCURRENT :         25B C |  GETPLAYERNEXTOFFSET :          25D C |
*HAS64 :                          1 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
*INEXTMODE :                      0 - | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - | *INSRCMODE :                      0 - |
*INSUPMODE :                      0 - |  INTERRUPT :                    3BE C |
 KEY_FIRE :                       8 - |  KEY_FORWARD :                    0 - |
 KEY_LEFT :                       A - |  KEY_RIGHT :                      D - |
 KILLS01 :                      CF0 - | *KILLS10 :                      CF1 - |
*LISTON :                         1 - |  LOOP :                          2F C |
*MACEXP :                         1 - |  MAIN :                          12 C |
 MAP :                          D00 - |  MAZE_OPEN :                      0 - |
*MAZE_PRINCESS :                  1 - |  MAZE_WALL :                     80 - |
 MIRRORDISPLAY :                1C9 C | *MOMCPU :                      1802 - |
*MOMCPUNAME :                  1802 - |  MOVEPLAYER :                   400 C |
 MOVETIMER :                    CFC - |  MOVE_FIRETIME :                 B4 - |
 MOVE_MOVETIME :                 14 - |  MOVE_TURNTIME :                 14 - |
*NESTMAX :                      100 - | *PACKING :                        0 - |
*PADDING :                        1 - |  PLAYER :                       CF3 - |
 PLAYERDIRECTIONTABLE :         2F7 C |  PPVECTOR :                     CF4 - |
 R0 :                             0 - |  R1 :                             1 - |
 R2 :                             2 - |  R3 :                             3 - |
 R4 :                             4 - |  R5 :                             5 - |
*R6 :                             6 - | *R7 :                             7 - |
*R8 :                             8 - | *R9 :                             9 - |
 RA :                             A - |  RANDOMNUMBER :                 154 C |
 RB :                             B - |  RC :                             C - |
 RD :                             D - |  RE :                             E - |
 REFRESH :                      3CB C | *RELAXED :                        0 - |
 REPAINT :                      300 C |  REPAINTDISPLAYOUTLINE :        17A C |
 RESETPLAYER :                  23E C |  RETURN :                       3BA C |
 RF :                             F - |  SCANKEYBOARD :                 A80 C |
 SCREEN :                       F00 - |  SPRITEDATA :                   A94 C |
 STACK :                        CE8 - | *TIME :                    15:13:14 - |
 TIMERS :                       CFC - | *TRUE :                           1 - |
*VERSION :                     142F - |  _MDLOOP :                      1CF C |
 _RDCLEAR :                     182 C |  _RDDRAWBYTEBLOCKS :            19D C |
 _RDLOOP :                      18F C |  _RDNOSOLID :                   1A8 C |
 _RDRESETMASKS :                189 C |  __CMFILL :                     107 C |
 __CMGENERATE :                 11A C |  __CMNEXT :                     14B C |
 __CMNOTDOWN :                  14B C |  __CMNOTRIGHT :                 139 C |
 __DOLEFTMASK :                 208 C |  __DOMASK :                     20F C |
 __DONOADJUST :                 22D C |  __DONOTRIGHT :                 222 C |
 __DPVDRAWLINE :                2DF C |  __DPVDRAWWALL :                2D6 C |
 __DPVEXIT :                    2F1 C |  __DPVEXITWALL :                2EE C |
 __DPVNOLEFTWALL :              2B6 C |  __DPVNORIGHTWALL :             2C0 C |
 __DSGFINISHED :                3B2 C |  __DSGLOOP :                    3A1 C |
 __GRAPHIC00 :                  AB4 C |  __GRAPHIC01 :                  AE6 C |
 __GRAPHIC02 :                  B18 C |  __GRAPHIC03 :                  B3E C |
 AS V1.42 Beta [Bld 102] - source file game.asm - page 32 - 7/2/2016 15:13:14


 __GRAPHIC04 :                  B64 C |  __GRAPHIC05 :                  B82 C |
 __GRAPHIC06 :                  BA0 C |  __GRAPHIC07 :                  BB6 C |
 __GRAPHIC08 :                  BCC C |  __GRAPHIC09 :                  BE2 C |
 __GRAPHIC10 :                  BF8 C |  __GRAPHIC11 :                  C0A C |
 __GRAPHIC12 :                  C1C C |  __GRAPHIC13 :                  C2A C |
 __GRAPHIC14 :                  C38 C |  __GRAPHIC15 :                  C42 C |
 __IRQNEXTTIMER :               3E9 C |  __IRQTIMERLOOP :               3E1 C |
 __MPEFFECT1 :                  45A C |  __MPEFFECT2 :                  460 C |
 __MPEXIT :                     487 C |  __MPFINDPRINCESS :             47A C |
 __MPKILL :                     48A C |  __MPTIMER1 :                   44A C |
 __MPTRYMOVE :                  42E C |  __MPTURN :                     424 C |
 __REPAINTCOPY :                380 C |  __REPAINTEXIT :                333 C |
 __REPAINTNOCOPY :              389 C |  __RNHIGHM1 :                   15A C |
 __RNLOWM1 :                    161 C |  __RNNOTOGGLE :                 170 C |
 __RPFINDPRINCESS :             348 C |  __RPFOUNDPRINCESS :            35D C |
 __RPSTATUS :                   36D C |  __SKEXIT :                     A90 C |
 __SKLOOP :                     A84 C |

    147 symbols
     36 unused symbols

 AS V1.42 Beta [Bld 102] - source file game.asm - page 33 - 7/2/2016 15:13:14


  defined macros:
  ---------------

CALL                                  | LRI                                  
RECALL                                | RETURN                               

      4 macros

 AS V1.42 Beta [Bld 102] - source file game.asm - page 34 - 7/2/2016 15:13:14


  codepages:
  ----------

STANDARD (0 changed characters)


0.02 seconds assembly time

   1507 lines source file
   1749 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
